{
  "overview": {
    "projectName": "IoT Containment Monitoring System",
    "version": "0.1.0",
    "description": "Full-stack IoT monitoring system with real-time sensor data and CCTV integration",
    "technologies": {
      "frontend": {
        "framework": "Next.js 14",
        "language": "TypeScript",
        "styling": "Tailwind CSS",
        "ui": "Radix UI + shadcn/ui",
        "stateManagement": "React Context + Custom Hooks",
        "realtime": "MQTT.js"
      },
      "backend": {
        "framework": ".NET 9",
        "language": "C#",
        "database": "SQLite + Entity Framework Core",
        "authentication": "JWT",
        "realtime": "MQTTnet",
        "api": "ASP.NET Core Web API"
      }
    },
    "dependencies": {
      "frontend": [
        "@hookform/resolvers",
        "@radix-ui/react-accordion",
        "@radix-ui/react-alert-dialog",
        "@radix-ui/react-avatar",
        "@radix-ui/react-checkbox",
        "@radix-ui/react-collapsible",
        "@radix-ui/react-dialog",
        "@radix-ui/react-dropdown-menu",
        "@radix-ui/react-hover-card",
        "@radix-ui/react-label",
        "@radix-ui/react-menubar",
        "@radix-ui/react-navigation-menu",
        "@radix-ui/react-popover",
        "@radix-ui/react-progress",
        "@radix-ui/react-radio-group",
        "@radix-ui/react-scroll-area",
        "@radix-ui/react-select",
        "@radix-ui/react-separator",
        "@radix-ui/react-slider",
        "@radix-ui/react-slot",
        "@radix-ui/react-switch",
        "@radix-ui/react-tabs",
        "@radix-ui/react-toast",
        "@radix-ui/react-toggle",
        "@radix-ui/react-tooltip",
        "@types/better-sqlite3",
        "@types/mqtt",
        "@types/node",
        "@types/react",
        "@types/react-dom",
        "autoprefixer",
        "axios",
        "better-sqlite3",
        "chart.js",
        "class-variance-authority",
        "clsx",
        "cmdk",
        "cookies-next",
        "date-fns",
        "dotenv",
        "express",
        "fs",
        "hls.js",
        "lucide-react",
        "mqtt",
        "next",
        "next-themes",
        "paho-mqtt",
        "react",
        "react-chartjs-2",
        "react-day-picker",
        "react-dom",
        "react-flatpickr",
        "react-hook-form",
        "react-icons",
        "recharts",
        "sonner",
        "sweetalert2",
        "sweetalert2-react-content",
        "tailwind-merge",
        "tailwindcss",
        "tailwindcss-animate",
        "three",
        "typescript",
        "uuid",
        "xlsx",
        "zod"
      ],
      "backend": [
        "DotNetEnv",
        "FFMpegCore",
        "Microsoft.AspNetCore.Authentication.JwtBearer",
        "Microsoft.AspNetCore.OpenApi",
        "Microsoft.EntityFrameworkCore.Design",
        "Microsoft.EntityFrameworkCore.Sqlite",
        "MQTTnet",
        "Swashbuckle.AspNetCore",
        "System.Diagnostics.PerformanceCounter"
      ]
    }
  },
  "backend": {
    "controllers": [
      {
        "name": "AccessLogController",
        "description": "/ Get access logs with filtering and pagination\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<AccessLog>>> GetAccessLogs(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> GetAccessLog(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> CreateAccessLog([FromBody] AccessLog accessLog)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "software",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> LogSoftwareAccess([FromBody] SoftwareAccessRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "via/{via}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<AccessLog>>>> GetAccessLogsByVia(AccessMethod via)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "summary",
            "description": "",
            "signature": "public async Task<ActionResult<object>> GetAccessLogSummary(",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "ActivityReportController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReports()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-date-range",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByDateRange(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-status/{status}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByStatus(string status)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-trigger/{trigger}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByTrigger(string trigger)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "count",
            "description": "",
            "signature": "public async Task<ActionResult<int>> GetTotalCount()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<ActivityReport>> GetActivityReport(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<ActivityReport>> CreateActivityReport(CreateActivityReportRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteActivityReport(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "all",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteAllActivityReports()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Admin"
        ]
      },
      {
        "name": "AuthController",
        "description": "",
        "endpoints": [
          {
            "method": "POST",
            "path": "login",
            "description": "",
            "signature": "public async Task<ActionResult<LoginResponse>> Login(LoginRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "register",
            "description": "",
            "signature": "public async Task<ActionResult<LoginResponse>> Register(RegisterRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "logout",
            "description": "",
            "signature": "public IActionResult Logout()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "me",
            "description": "",
            "signature": "public IActionResult GetCurrentUser()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "verify-reset-credentials",
            "description": "",
            "signature": "public async Task<ActionResult<VerifyResetCredentialsResponse>> VerifyResetCredentials(VerifyResetCredentialsRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "reset-password",
            "description": "",
            "signature": "public async Task<ActionResult<ResetPasswordResponse>> ResetPassword(ResetPasswordRequest request)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "BackupController",
        "description": "",
        "endpoints": [
          {
            "method": "POST",
            "path": "create",
            "description": "",
            "signature": "public async Task<IActionResult> CreateBackup()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "available",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<string>>> GetAvailableBackups()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "last-backup-date",
            "description": "",
            "signature": "public async Task<ActionResult<DateTime?>> GetLastBackupDate()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "is-backup-due",
            "description": "",
            "signature": "public async Task<ActionResult<bool>> IsBackupDue()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "cleanup",
            "description": "",
            "signature": "public async Task<IActionResult> CleanupOldBackups([FromQuery] int keepLastN = 4)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "directory",
            "description": "",
            "signature": "public async Task<ActionResult<string>> GetBackupDirectory()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Admin"
        ]
      },
      {
        "name": "CameraConfigController",
        "description": "This is the line that was causing the error in the image.",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<CameraConfig>>> GetCameraConfigs()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<CameraConfig>> GetCameraConfig(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<CameraConfig>> CreateCameraConfig(CreateCameraConfigRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateCameraConfig(int id, UpdateCameraConfigRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteCameraConfig(int id)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "ContainmentControlController",
        "description": "/ Send toggle control command to containment via MQTT\r\n        /",
        "endpoints": [
          {
            "method": "POST",
            "path": "toggle",
            "description": "",
            "signature": "public async Task<ActionResult<ContainmentControlResponse>> SendToggleCommand(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{containmentId}/history",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ContainmentControl>>> GetControlHistory(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "history",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ContainmentControl>>> GetAllControlHistory(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "controls",
            "description": "",
            "signature": "public async Task<ActionResult<object>> TestMqttControl()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test",
            "description": "",
            "signature": "public async Task<ActionResult<object>> TestMqttControl()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "ContainmentController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Containment>>> GetContainments()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<Containment>> GetContainment(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<Containment>> CreateContainment(CreateContainmentRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateContainment(int id, UpdateContainmentRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteContainment(int id)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "ContainmentStatusController",
        "description": "/ Get current status for a specific containment\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "{containmentId}",
            "description": "",
            "signature": "public async Task<ActionResult<ContainmentStatus>> GetStatus(int containmentId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<ContainmentStatus>>> GetAllStatuses()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "{containmentId}/initialize",
            "description": "",
            "signature": "public async Task<ActionResult<ContainmentStatus>> InitializeStatus(int containmentId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "{containmentId}/process",
            "description": "",
            "signature": "public async Task<ActionResult<ContainmentStatus>> ProcessMqttPayload(",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "DebugController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "device-references/{deviceId}",
            "description": "",
            "signature": "public async Task<IActionResult> GetDeviceReferences(int deviceId)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": false,
        "roles": []
      },
      {
        "name": "DeviceActivityController",
        "description": "/ Get activity status for all devices\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "all",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<List<DeviceActivityInfo>>>> GetAllDevicesActivity()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<DeviceActivityInfo>>> GetDeviceActivity(int deviceId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}/active",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<bool>>> IsDeviceActive(int deviceId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "update-all",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<string>>> UpdateAllDevicesActivity()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "device/{deviceId}/update",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<string>>> UpdateSingleDeviceActivity(int deviceId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "statistics",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<object>>> GetDeviceActivityStatistics()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "DeviceController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Device>>> GetDevices()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-rack/{rackId}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Device>>> GetDevicesByRack(int rackId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<Device>> GetDevice(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<Device>> CreateDevice(CreateDeviceRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateDevice(int id, UpdateDeviceRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteDevice(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<DeviceActivityStatus>>> GetDevicesStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}/status",
            "description": "",
            "signature": "public async Task<ActionResult<DeviceActivityStatus>> GetDeviceStatus(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}/online",
            "description": "",
            "signature": "public async Task<ActionResult<bool>> IsDeviceOnline(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "status/check",
            "description": "",
            "signature": "public async Task<ActionResult> ForceStatusCheck()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "status/initialize",
            "description": "",
            "signature": "public async Task<ActionResult> InitializeMonitoring()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "DeviceSensorDataController",
        "description": "/ Get sensor data with advanced filtering and pagination\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<DeviceSensorData>>> GetSensorData(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "latest",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetLatestSensorData(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByDevice(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}/latest",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<DeviceSensorData>>> GetLatestSensorDataByDevice(int deviceId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "rack/{rackId}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByRack(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "containment/{containmentId}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByContainment(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}/statistics",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<object>>> GetSensorStatistics(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}/data-history/{dataKey}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<object>>>> GetDataHistory(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "topics",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<string>>>> GetActiveTopics()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "containment/{containmentId}/topics",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<string>>>> GetTopicsByContainment(int containmentId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "device/{deviceId}/aggregated/{dataKey}",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<object>>>> GetAggregatedData(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "sensor-types",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<string>>> GetAvailableSensorTypes()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "summary",
            "description": "",
            "signature": "public async Task<ActionResult<object>> GetSensorDataSummary(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "device/{deviceId}/parse",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<DeviceSensorData>>> ParseAndStoreSensorData(",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "EmergencyReportController",
        "description": "/ Get emergency reports with filtering options\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<EmergencyReport>>> GetEmergencyReports(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "summary",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<EmergencyReportSummary>>> GetEmergencyReportSummary(",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "active",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<EmergencyReport>>> GetActiveEmergencies()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "active/{emergencyType}",
            "description": "",
            "signature": "public async Task<ActionResult<EmergencyReport>> GetActiveEmergency(string emergencyType)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "close/{emergencyType}",
            "description": "",
            "signature": "public async Task<ActionResult> CloseActiveEmergency(string emergencyType)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public async Task<ActionResult<object>> GetEmergencyStatus()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "HealthController",
        "description": "/ Health check endpoint to verify backend status\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "ping",
            "description": "",
            "signature": "",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": false,
        "roles": []
      },
      {
        "name": "IpScannerController",
        "description": "File: Controllers/IpScannerController.cs",
        "endpoints": [
          {
            "method": "GET",
            "path": "scan",
            "description": "",
            "signature": "public async Task<IActionResult> ScanNetwork()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": false,
        "roles": []
      },
      {
        "name": "MaintenanceController",
        "description": "Check if user is admin by checking role level",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenances()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-target/{targetType}/{targetId}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesByTarget(MaintenanceTarget targetType, int targetId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-assignee/{userId}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesByAssignee(int userId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "my-tasks",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMyMaintenanceTasks()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "calendar",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesForCalendar()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<Maintenance>> GetMaintenance(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<Maintenance>> CreateMaintenance(CreateMaintenanceRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateMaintenance(int id, UpdateMaintenanceRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PATCH",
            "path": "{id}/status",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateMaintenanceStatus(int id, UpdateMaintenanceStatusRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteMaintenance(int id)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "MenuManagementController",
        "description": "Controllers/MenuManagementController.cs",
        "endpoints": [
          {
            "method": "GET",
            "path": "user-menu",
            "description": "",
            "signature": "public async Task<IActionResult> GetUserMenu()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "roles",
            "description": "",
            "signature": "public async Task<IActionResult> GetRoles()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "roles",
            "description": "",
            "signature": "public async Task<IActionResult> CreateRole([FromBody] CreateRoleRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "roles/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateRole(int id, [FromBody] UpdateRoleRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "roles/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteRole(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "menu-groups",
            "description": "",
            "signature": "public async Task<IActionResult> GetMenuGroups()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "menu-groups",
            "description": "",
            "signature": "public async Task<IActionResult> CreateMenuGroup([FromBody] CreateMenuGroupRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "menu-groups/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateMenuGroup(int id, [FromBody] UpdateMenuGroupRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "menu-items",
            "description": "",
            "signature": "public async Task<IActionResult> CreateMenuItem([FromBody] CreateMenuItemRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "menu-items/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateMenuItem(int id, [FromBody] UpdateMenuItemRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PATCH",
            "path": "menu-items/{id}/toggle-active",
            "description": "",
            "signature": "public async Task<IActionResult> ToggleMenuItemActive(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PATCH",
            "path": "menu-groups/{id}/toggle-active",
            "description": "",
            "signature": "public async Task<IActionResult> ToggleMenuGroupActive(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "menu-items/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteMenuItem(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "menu-groups/{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteMenuGroup(int id)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Admin",
          "Developer"
        ]
      },
      {
        "name": "MqttConfigurationController",
        "description": "Reconnect MQTT with new configuration",
        "endpoints": [
          {
            "method": "GET",
            "path": "active",
            "description": "",
            "signature": "public async Task<ActionResult<MqttConfiguration>> GetActiveConfiguration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "effective",
            "description": "",
            "signature": "public async Task<ActionResult<Dictionary<string, object>>> GetEffectiveConfiguration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<MqttConfiguration>>> GetConfigurations()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<MqttConfiguration>> GetConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<MqttConfiguration>> CreateConfiguration(CreateMqttConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateConfiguration(int id, UpdateMqttConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "{id}/activate",
            "description": "",
            "signature": "public async Task<IActionResult> SetActiveConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "toggle",
            "description": "",
            "signature": "public async Task<IActionResult> ToggleMqtt(ToggleMqttRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "{id}/test",
            "description": "",
            "signature": "public async Task<IActionResult> TestConnection(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test",
            "description": "",
            "signature": "public async Task<IActionResult> TestConnectionWithConfig(TestMqttConnectionRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status/all",
            "description": "",
            "signature": "public async Task<ActionResult<Dictionary<int, bool>>> GetAllConnectionStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status/current",
            "description": "",
            "signature": "public async Task<ActionResult<object>> GetCurrentStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "reload",
            "description": "",
            "signature": "public async Task<IActionResult> ReloadConfiguration()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "MqttController",
        "description": "Log user info for debugging",
        "endpoints": [
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public IActionResult GetStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "connect",
            "description": "",
            "signature": "public async Task<IActionResult> Connect()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "disconnect",
            "description": "",
            "signature": "public async Task<IActionResult> Disconnect()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "publish",
            "description": "",
            "signature": "public async Task<IActionResult> Publish([FromBody] PublishRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "subscribe",
            "description": "",
            "signature": "public async Task<IActionResult> Subscribe([FromBody] SubscribeRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "unsubscribe",
            "description": "",
            "signature": "public async Task<IActionResult> Unsubscribe([FromBody] UnsubscribeRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test",
            "description": "",
            "signature": "public async Task<IActionResult> TestMqtt()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "MqttTestController",
        "description": "Test connection",
        "endpoints": [
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public IActionResult GetConnectionStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "connect",
            "description": "",
            "signature": "public async Task<IActionResult> Connect()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "disconnect",
            "description": "",
            "signature": "public async Task<IActionResult> Disconnect()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "publish",
            "description": "",
            "signature": "public async Task<IActionResult> PublishTestMessage([FromBody] TestMessageRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "subscribe",
            "description": "",
            "signature": "public async Task<IActionResult> SubscribeToTestTopic([FromBody] TestSubscribeRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test-websocket",
            "description": "",
            "signature": "public async Task<IActionResult> TestWebSocketConnection()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Admin",
          "Developer"
        ]
      },
      {
        "name": "NetworkController",
        "description": "/ Get all network configurations\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<IActionResult> GetAllConfigurations()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> GetConfigurationById(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "interface/{interfaceType}",
            "description": "",
            "signature": "public async Task<IActionResult> GetConfigurationByInterface(NetworkInterfaceType interfaceType)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<IActionResult> CreateConfiguration([FromBody] NetworkConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateConfiguration(int id, [FromBody] NetworkConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "interfaces-file",
            "description": "",
            "signature": "public async Task<IActionResult> GetInterfacesFile()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "apply",
            "description": "",
            "signature": "public async Task<IActionResult> ApplyConfiguration([FromBody] ApplyNetworkConfigRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "restart",
            "description": "",
            "signature": "public async Task<IActionResult> RestartNetworking()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "backup",
            "description": "",
            "signature": "public async Task<IActionResult> BackupConfiguration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "restore",
            "description": "",
            "signature": "public async Task<IActionResult> RestoreConfiguration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public async Task<IActionResult> GetInterfaceStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test-connectivity",
            "description": "",
            "signature": "public async Task<IActionResult> TestConnectivity([FromBody] TestConnectivityRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "validate",
            "description": "",
            "signature": "public async Task<IActionResult> ValidateConfiguration([FromBody] NetworkConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "revert-to-dhcp/{interfaceType}",
            "description": "",
            "signature": "public async Task<IActionResult> RevertToDhcp(NetworkInterfaceType interfaceType)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "parse-interfaces-file",
            "description": "",
            "signature": "public async Task<IActionResult> ParseInterfacesFile()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "clear-all-static",
            "description": "",
            "signature": "public async Task<IActionResult> ClearAllStaticConfigurations()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Admin",
          "Developer"
        ]
      },
      {
        "name": "RackController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Rack>>> GetRacks()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "by-containment/{containmentId}",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<Rack>>> GetRacksByContainment(int containmentId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<Rack>> GetRack(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<Rack>> CreateRack(CreateRackRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateRack(int id, UpdateRackRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteRack(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "by-containment/{containmentId}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteRacksByContainment(int containmentId)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "RoleManagementController",
        "description": "User still using enum role, map it",
        "endpoints": [
          {
            "method": "GET",
            "path": "roles",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<RoleDto>>> GetRoles()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "migration/status",
            "description": "",
            "signature": "public async Task<ActionResult> GetMigrationStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "migration/execute",
            "description": "",
            "signature": "public async Task<ActionResult> ExecuteMigration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "users/{userId}/permissions",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<string>>> GetUserPermissions(int userId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "users/{userId}/role",
            "description": "",
            "signature": "public async Task<ActionResult<RoleDto>> GetUserRole(int userId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "initialize",
            "description": "",
            "signature": "public async Task<ActionResult> InitializeRoles()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "test/current-user",
            "description": "",
            "signature": "public async Task<ActionResult> GetCurrentUserWithRole()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": [
          "Developer",
          "Admin"
        ]
      },
      {
        "name": "ScanConfigurationController",
        "description": "GET: api/ScanConfiguration",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<ScanConfiguration>> GetScanConfiguration()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<ScanConfiguration>> GetScanConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<ScanConfiguration>> CreateScanConfiguration(ScanConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateScanConfiguration(int id, ScanConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "active",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateActiveScanConfiguration(ScanConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteScanConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/sync",
            "description": "",
            "signature": "public async Task<IActionResult> SyncWithMqtt()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/start",
            "description": "",
            "signature": "public async Task<IActionResult> StartScanning()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/stop",
            "description": "",
            "signature": "public async Task<IActionResult> StopScanning()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "constants",
            "description": "",
            "signature": "public IActionResult GetConstants()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "SensorConfigurationController",
        "description": "GET: api/SensorConfiguration",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<SensorConfiguration>>> GetSensorConfigurations()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<SensorConfiguration>> GetSensorConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "sensor/{sensorNumber}",
            "description": "",
            "signature": "public async Task<ActionResult<SensorConfiguration>> GetSensorConfigurationBySensorNumber(int sensorNumber)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<SensorConfiguration>> CreateSensorConfiguration(SensorConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateSensorConfiguration(int id, SensorConfigurationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteSensorConfiguration(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "calibration",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateCalibration(CalibrationRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "calibration",
            "description": "",
            "signature": "public async Task<ActionResult<Dictionary<string, decimal[]>>> GetAllCalibrations()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/sync",
            "description": "",
            "signature": "public async Task<IActionResult> SyncWithMqtt()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/upload",
            "description": "",
            "signature": "public async Task<IActionResult> UploadSensorListToMqtt()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "mqtt/mode/{mode}",
            "description": "",
            "signature": "public async Task<IActionResult> ChangeMqttMode(string mode)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "SensorDataSimulatorController",
        "description": "/ Generate sample sensor data for testing purposes\n        /",
        "endpoints": [
          {
            "method": "POST",
            "path": "generate",
            "description": "",
            "signature": "public async Task<IActionResult> GenerateSampleData([FromQuery] int daysBack = 7, [FromQuery] int recordsPerHour = 6)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "statistics",
            "description": "",
            "signature": "public async Task<IActionResult> GetStatistics()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "SystemController",
        "description": "/ Mendapatkan informasi status sistem secara real-time.\r\n        /",
        "endpoints": [
          {
            "method": "GET",
            "path": "info",
            "description": "",
            "signature": "public async Task<IActionResult> GetSystemInfo()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "public async Task<IActionResult> GetSystemStatus()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "refresh",
            "description": "",
            "signature": "public async Task<IActionResult> RefreshSystemInfo()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "basic",
            "description": "",
            "signature": "public IActionResult GetBasicSystemInfo()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "health",
            "description": "",
            "signature": "public IActionResult HealthCheck()",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "UserPhotoController",
        "description": "Validate file type",
        "endpoints": [
          {
            "method": "POST",
            "path": "upload/{userId}",
            "description": "",
            "signature": "public async Task<IActionResult> UploadPhoto(int userId, IFormFile photo)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "delete/{userId}",
            "description": "",
            "signature": "public async Task<IActionResult> DeletePhoto(int userId)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "get/{userId}",
            "description": "",
            "signature": "public async Task<IActionResult> GetPhoto(int userId)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "UsersController",
        "description": "",
        "endpoints": [
          {
            "method": "GET",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<IEnumerable<User>>> GetUsers()",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<ActionResult<User>> GetUser(int id)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "",
            "description": "",
            "signature": "public async Task<ActionResult<User>> CreateUser(CreateUserRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "PUT",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> UpdateUser(int id, UpdateUserRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "DELETE",
            "path": "{id}",
            "description": "",
            "signature": "public async Task<IActionResult> DeleteUser(int id)",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      },
      {
        "name": "WhatsAppController",
        "description": "/ Send a manual WhatsApp message\r\n        /",
        "endpoints": [
          {
            "method": "POST",
            "path": "send-message",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<object>>> SendMessage([FromBody] SendMessageRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "send-template",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<object>>> SendTemplateMessage([FromBody] SendTemplateMessageRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "POST",
            "path": "test",
            "description": "",
            "signature": "public async Task<ActionResult<ApiResponse<object>>> TestConnection([FromBody] WhatsAppTestMessageRequest request)",
            "requiresAuth": false,
            "roles": []
          },
          {
            "method": "GET",
            "path": "status",
            "description": "",
            "signature": "",
            "requiresAuth": false,
            "roles": []
          }
        ],
        "authorize": true,
        "roles": []
      }
    ],
    "models": [
      {
        "name": "AccessLog",
        "description": "",
        "properties": [
          {
            "type": "class",
            "name": "AccessLog",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "User",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "AccessMethod",
            "name": "Via",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Trigger",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsSuccess",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "ActivityReport",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "ActivityReport",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Trigger",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ApiResponse",
        "description": "",
        "properties": [
          {
            "type": "bool",
            "name": "Success",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Message",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "CameraConfig",
        "description": "",
        "properties": [
          {
            "type": "class",
            "name": "CameraConfig",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "Port",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ApiKey",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Group",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "Containment",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "Containment",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ContainmentType",
            "name": "Type",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Location",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ICollection<Rack>",
            "name": "Racks",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ContainmentControl",
        "description": "Pending, Sent, Failed",
        "properties": [
          {
            "type": "class",
            "name": "ContainmentControl",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Command",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "ExecutedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "ContainmentControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "ControlAction",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ContainmentControlRequest",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "ContainmentControlType",
            "name": "ControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "ControlAction",
            "name": "Action",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ToggleControlRequest",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "ControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ContainmentControlResponse",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Message",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "ContainmentStatus",
        "description": "Status fields from MQTT payload",
        "properties": [
          {
            "type": "class",
            "name": "ContainmentStatus",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LightingStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "SmokeDetectorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "FssStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyButtonState",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "SelenoidStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LimitSwitchFrontDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LimitSwitchBackDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "OpenFrontDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "OpenBackDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyTemp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "MqttTimestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "Device",
        "description": "Sensor specific fields",
        "properties": [
          {
            "type": "class",
            "name": "Device",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Type",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "RackId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "DeviceActivityStatus",
        "description": "Online, Offline, Unknown",
        "properties": [
          {
            "type": "class",
            "name": "DeviceActivityStatus",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "DeviceId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastSeen",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastStatusChange",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ConsecutiveFailures",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "DeviceSensorData",
        "description": "Helper method to parse raw payload as JSON",
        "properties": [
          {
            "type": "class",
            "name": "DeviceSensorData",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "DeviceId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RackId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Topic",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "ReceivedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "RawPayload",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "EmergencyReport",
        "description": "\"Smoke\", \"FSS\", \"EmergencyButton\", \"EmergencyTemp\"",
        "properties": [
          {
            "type": "class",
            "name": "EmergencyReport",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "EmergencyType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Status",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "StartTime",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "EmergencyType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "EmergencyReportSummary",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "TotalEvents",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "TimeSpan",
            "name": "TotalDuration",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "CurrentlyActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "EmergencyReportFilter",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Page",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PageSize",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "Maintenance",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "Maintenance",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "StartTask",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "EndTask",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "AssignTo",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "MaintenanceTarget",
            "name": "TargetType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "TargetId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "MenuManagement",
        "description": "Models/MenuManagement.cs",
        "properties": [
          {
            "type": "class",
            "name": "Role",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "DisplayName",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Level",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Color",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "Permission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Category",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuGroup",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuItem",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Url",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "MenuGroupId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuPermission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsRequired",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "UserRoleAssignment",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "UserId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RoleId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "AssignedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RolePermission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RoleId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PermissionId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "AssignedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuGroupDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<MenuItemDto>",
            "name": "Items",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuItemDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Url",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RoleDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "DisplayName",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Level",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Color",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<string>",
            "name": "Permissions",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "UserMenuResponse",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "RoleDto",
            "name": "UserRole",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<string>",
            "name": "UserPermissions",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "MqttConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "MqttConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "UseEnvironmentConfig",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "UseSsl",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "KeepAliveInterval",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ReconnectDelay",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "NetworkConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "NetworkConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "NetworkInterfaceType",
            "name": "InterfaceType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "NetworkConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "NetworkInterfaceStatus",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "InterfaceName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsUp",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastUpdated",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ApplyNetworkConfigRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "BackupCurrentConfig",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "Rack",
        "description": "Rack capacity in U units (1U, 2U, etc.)",
        "properties": [
          {
            "type": "class",
            "name": "Rack",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CapacityU",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ICollection<Device>",
            "name": "Devices",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ScannedDevice",
        "description": "File: Models/ScannedDevice.cs",
        "properties": [
          {
            "type": "class",
            "name": "ScannedDevice",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "SensorConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "SensorConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "SensorNumber",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "TemperatureOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "HumidityOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfiguration",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "MaxAddressToScan",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanTimeoutMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanIntervalMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "TemperatureOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "HumidityOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanTimeoutMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanIntervalMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "CalibrationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorMqttCommand",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorMqttResponse",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Command",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorListData",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "SensorDataStructure",
            "name": "DataSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorDataStructure",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "Enabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfigData",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "SystemConfig",
        "description": "Modular I2C Addresses",
        "properties": [
          {
            "type": "class",
            "name": "SystemConfig",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModularI2cAddress1",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cAddress2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cRelay1Address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlLight",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlSelenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalDoorLock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenBackDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "TempEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempUpperThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempBottomThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "PinConfig",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PirSensorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "FssPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SmokeSensorButtonEmergencyPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayLightPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidOpen",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidClose",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniDoorEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "SystemConfigRequest",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cAddress2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cRelay1Address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlLight",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlSelenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalDoorLock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenBackDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "TempEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempUpperThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempBottomThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "PinConfigRequest",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "FssPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SmokeSensorButtonEmergencyPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayLightPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidOpen",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidClose",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniDoorEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MqttConfigPayload",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MqttConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Result",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "CurrentSystemConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "modular_i2c_address_2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "modular_i2c_relay_1_address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_control_light",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_control_selenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_door_lock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_open_front_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_open_back_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "temp_emergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "temp_upper_threshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "temp_bottom_threshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "CurrentPinConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "RelayPins",
            "name": "relay",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "RelayMiniPins",
            "name": "relay_mini",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "OptocouplerPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "fss_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "smoke_sensor_pin_button_emergency_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "button_front_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "button_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "limit_switch_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "limit_switch_front_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RelayPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_magnetic_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_magnetic_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RelayMiniPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_selenoid_close",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_front_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_door_emergency",
            "isRequired": false,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "SystemInfo",
        "description": "Additional system information",
        "properties": [
          {
            "type": "class",
            "name": "SystemInfo",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "CpuTemp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "MemoryUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "DiskUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Eth0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Wlan0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "Uptime",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Hostname",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsPlatform",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsVersion",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ProcessorCount",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsAvailable",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SystemInfoDto",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "CpuTemp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "MemoryUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "DiskUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Eth0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Wlan0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "Uptime",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Hostname",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsPlatform",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsVersion",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ProcessorCount",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsAvailable",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "User",
        "description": "Legacy enum role - kept for backward compatibility during migration",
        "properties": [
          {
            "type": "class",
            "name": "User",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Email",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "PasswordHash",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "UserRole",
            "name": "Role",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      }
    ],
    "services": [
      {
        "name": "AccessLogService",
        "description": "Apply filters",
        "methods": [
          "AccessLogService",
          "GetAllAccessLogsAsync",
          "GetAccessLogsAsync",
          "if",
          "if",
          "if",
          "if",
          "return",
          "GetAccessLogByIdAsync",
          "CreateAccessLogAsync",
          "LogSoftwareAccessAsync",
          "CreateAccessLogAsync",
          "GetAccessLogsByViaAsync",
          "GetAccessLogsByUserAsync",
          "GetAccessLogSummaryAsync",
          "if",
          "if"
        ],
        "interfaces": [
          "IAccessLogService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<AccessLogService>"
        ]
      },
      {
        "name": "ActivityReportService",
        "description": "",
        "methods": [
          "ActivityReportService",
          "GetAllActivityReportsAsync",
          "GetActivityReportsByDateRangeAsync",
          "GetActivityReportsByStatusAsync",
          "GetActivityReportsByTriggerAsync",
          "GetActivityReportByIdAsync",
          "CreateActivityReportAsync",
          "GetActivityReportByIdAsync",
          "DeleteActivityReportByIdAsync",
          "if",
          "DeleteAllActivityReportsAsync",
          "if",
          "GetTotalActivityReportsCountAsync"
        ],
        "interfaces": [
          "IActivityReportService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "AuthService",
        "description": "Get default user role from database",
        "methods": [
          "AuthService",
          "AuthenticateAsync",
          "if",
          "RegisterAsync",
          "if",
          "InvalidOperationException",
          "HashPassword",
          "HashPassword",
          "Rfc2898DeriveBytes",
          "VerifyPassword",
          "Rfc2898DeriveBytes",
          "for",
          "if",
          "FindUserForPasswordResetAsync",
          "ResetPasswordAsync",
          "if",
          "HashPassword"
        ],
        "interfaces": [
          "IAuthService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "BackupHostedService",
        "description": "Check daily",
        "methods": [
          "BackupHostedService",
          "ExecuteAsync",
          "while",
          "if",
          "if",
          "backups",
          "catch",
          "catch"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "IServiceProvider",
          "ILogger<BackupHostedService>"
        ]
      },
      {
        "name": "BackupService",
        "description": "Create backup directory if it doesn't exist",
        "methods": [
          "BackupService",
          "GetDatabasePath",
          "CreateBackupAsync",
          "CreateBackupAsync",
          "CreateBackupAsync",
          "if",
          "CompressFileAsync",
          "LogBackupActivity",
          "LogBackupActivity",
          "catch",
          "LogBackupActivity",
          "GetBackupDirectoryAsync",
          "GetAvailableBackupsAsync",
          "catch",
          "DeleteOldBackupsAsync",
          "foreach",
          "if",
          "LogBackupActivity",
          "catch",
          "LogBackupActivity",
          "GetLastBackupDateAsync",
          "if",
          "catch",
          "IsBackupDueAsync",
          "GetLastBackupDateAsync",
          "if",
          "GetDatabasePath",
          "if",
          "if",
          "CompressFileAsync",
          "GZipStream",
          "LogBackupActivity",
          "catch"
        ],
        "interfaces": [
          "IBackupService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<BackupService>",
          "IConfiguration"
        ]
      },
      {
        "name": "CameraConfigService",
        "description": "",
        "methods": [
          "CameraConfigService",
          "GetAllCameraConfigsAsync",
          "GetCameraConfigByIdAsync",
          "CreateCameraConfigAsync",
          "UpdateCameraConfigAsync",
          "if",
          "DeleteCameraConfigAsync",
          "if",
          "CameraConfigExistsAsync"
        ],
        "interfaces": [
          "ICameraConfigsService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "ContainmentControlService",
        "description": "Control all active containments",
        "methods": [
          "ContainmentControlService",
          "SendToggleCommandAsync",
          "if",
          "if",
          "if",
          "GetMqttTogglePayload",
          "foreach",
          "GetToggleDescription",
          "foreach",
          "catch",
          "catch",
          "if",
          "if",
          "catch",
          "GetMqttTogglePayload",
          "ArgumentException",
          "GetControlHistoryAsync",
          "GetAllControlHistoryAsync",
          "GetToggleDescription"
        ],
        "interfaces": [
          "IContainmentControlService"
        ],
        "dependencies": [
          "AppDbContext",
          "IMqttService",
          "IAccessLogService",
          "ILogger<ContainmentControlService>"
        ]
      },
      {
        "name": "ContainmentMqttHostedService",
        "description": "Load interval configuration from environment variables",
        "methods": [
          "new",
          "new",
          "ContainmentMqttHostedService",
          "if",
          "Timer",
          "ExecuteAsync",
          "WaitForMqttConnectionAsync",
          "SubscribeToSensorDeviceTopics",
          "while",
          "if",
          "SubscribeToSensorDeviceTopics",
          "catch",
          "catch",
          "catch",
          "WaitForMqttConnectionAsync",
          "while",
          "catch",
          "if",
          "if",
          "Exception",
          "HandleContainmentStatusMessage",
          "ExtractContainmentIdFromTopicOrPayload",
          "catch",
          "ExtractContainmentIdFromTopicOrPayload",
          "if",
          "if",
          "if",
          "catch",
          "SubscribeToSensorDeviceTopics",
          "foreach",
          "if",
          "catch",
          "HandleSensorMessage",
          "ExtractDeviceIdFromTopic",
          "if",
          "enabled",
          "if",
          "if",
          "if",
          "SaveSensorDataAsync",
          "catch",
          "ShouldSaveData",
          "if",
          "ShouldBufferData",
          "if",
          "update",
          "SaveSensorDataAsync",
          "BatchSaveCallback",
          "if",
          "foreach",
          "var",
          "SaveSensorDataAsync",
          "catch",
          "catch",
          "ExtractDeviceIdFromTopic",
          "foreach",
          "if",
          "foreach",
          "if",
          "if",
          "if",
          "catch",
          "StopAsync",
          "if",
          "catch",
          "Dispose"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "ILogger<ContainmentMqttHostedService>",
          "IServiceProvider",
          "IMqttService",
          "IConfiguration"
        ]
      },
      {
        "name": "ContainmentService",
        "description": "Cascade hard delete: remove all related devices first",
        "methods": [
          "ContainmentService",
          "GetAllContainmentsAsync",
          "GetContainmentByIdAsync",
          "CreateContainmentAsync",
          "GetContainmentByIdAsync",
          "UpdateContainmentAsync",
          "if",
          "GetContainmentByIdAsync",
          "DeleteContainmentAsync",
          "if",
          "foreach",
          "foreach"
        ],
        "interfaces": [
          "IContainmentService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "ContainmentStatusService",
        "description": "Check if this containment exists",
        "methods": [
          "ContainmentStatusService",
          "GetStatusByContainmentIdAsync",
          "CreateOrUpdateStatusAsync",
          "if",
          "ArgumentException",
          "if",
          "exist",
          "ProcessMqttPayloadAsync",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "ProcessEmergencyStatuses",
          "if",
          "if",
          "CreateOrUpdateStatusAsync",
          "catch",
          "ArgumentException",
          "catch",
          "GetAllStatusesAsync",
          "InitializeDefaultStatusAsync",
          "GetStatusByContainmentIdAsync",
          "if",
          "if",
          "ArgumentException",
          "ProcessEmergencyStatuses",
          "if",
          "FSS",
          "if",
          "if",
          "if",
          "catch"
        ],
        "interfaces": [
          "IContainmentStatusService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<ContainmentStatusService>",
          "IEmergencyReportService"
        ]
      },
      {
        "name": "DeviceActivityHostedService",
        "description": "Default check interval every 2 minutes",
        "methods": [
          "DeviceActivityHostedService",
          "ExecuteAsync",
          "while",
          "catch",
          "catch",
          "StartAsync",
          "StopAsync"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "IServiceProvider",
          "ILogger<DeviceActivityHostedService>",
          "IConfiguration"
        ]
      },
      {
        "name": "DeviceActivityService",
        "description": "Default thresholds - device considered active if data within last 5 minutes",
        "methods": [
          "DeviceActivityService",
          "UpdateDeviceActivityStatusAsync",
          "devices",
          "foreach",
          "UpdateSingleDeviceActivityInternalAsync",
          "if",
          "catch",
          "IsDeviceActiveAsync",
          "if",
          "catch",
          "GetDeviceActivityAsync",
          "if",
          "ArgumentException",
          "if",
          "if",
          "if",
          "if",
          "catch",
          "UpdateSingleDeviceActivityAsync",
          "if",
          "ArgumentException",
          "UpdateSingleDeviceActivityInternalAsync",
          "if",
          "catch",
          "GetAllDevicesActivityAsync",
          "foreach",
          "GetDeviceActivityAsync",
          "catch",
          "UpdateSingleDeviceActivityInternalAsync",
          "if",
          "if"
        ],
        "interfaces": [
          "IDeviceActivityService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<DeviceActivityService>",
          "IConfiguration"
        ]
      },
      {
        "name": "DeviceSensorDataService",
        "description": "Apply filters",
        "methods": [
          "DeviceSensorDataService",
          "GetSensorDataAsync",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "return",
          "GetSensorDataByDeviceIdAsync",
          "GetSensorDataByRackIdAsync",
          "GetSensorDataByContainmentIdAsync",
          "GetLatestSensorDataAsync",
          "GetLatestSensorDataByDeviceAsync",
          "StoreSensorDataAsync",
          "ParseAndStoreSensorDataAsync",
          "if",
          "ArgumentException",
          "ParseTimestampFromPayload",
          "StoreSensorDataAsync",
          "catch",
          "ParseTimestampFromPayload",
          "if",
          "if",
          "if",
          "if",
          "catch",
          "GetSensorStatisticsAsync",
          "if",
          "if",
          "if",
          "foreach",
          "foreach",
          "switch",
          "if",
          "catch",
          "foreach",
          "if",
          "if",
          "GetDataHistoryAsync",
          "foreach",
          "if",
          "switch",
          "if",
          "if",
          "catch",
          "GetAggregatedDataAsync",
          "foreach",
          "if",
          "switch",
          "if",
          "if",
          "catch",
          "DateTime",
          "GetAvailableSensorTypesAsync",
          "GetSensorDataSummaryAsync",
          "if",
          "if",
          "GetTemperatureHistoryAsync",
          "GetDataHistoryAsync",
          "GetHumidityHistoryAsync",
          "GetDataHistoryAsync",
          "GetActiveTopicsAsync",
          "GetTopicsByContainmentAsync"
        ],
        "interfaces": [
          "IDeviceSensorDataService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<DeviceSensorDataService>"
        ]
      },
      {
        "name": "DeviceService",
        "description": "For sensor devices, status is managed by DeviceActivityService based on MQTT data",
        "methods": [
          "DeviceService",
          "GetAllDevicesAsync",
          "GetDevicesByRackIdAsync",
          "GetDeviceByIdAsync",
          "CreateDeviceAsync",
          "GetDeviceByIdAsync",
          "UpdateDeviceAsync",
          "if",
          "if",
          "GetDeviceByIdAsync",
          "DeleteDeviceAsync",
          "if",
          "catch",
          "catch"
        ],
        "interfaces": [
          "IDeviceService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "DeviceStatusMonitoringHostedService",
        "description": "Get check interval from configuration (default: 2 minutes)",
        "methods": [
          "DeviceStatusMonitoringHostedService",
          "configuration",
          "StartAsync",
          "InitializeDeviceMonitoringAsync",
          "StopAsync",
          "ExecuteAsync",
          "while",
          "CheckDeviceStatusesAsync",
          "catch",
          "catch",
          "catch",
          "InitializeDeviceMonitoringAsync",
          "catch",
          "CheckDeviceStatusesAsync",
          "catch"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "IServiceProvider",
          "ILogger<DeviceStatusMonitoringHostedService>",
          "IConfiguration"
        ]
      },
      {
        "name": "DeviceStatusMonitoringService",
        "description": "Configurable timeouts (in minutes)",
        "methods": [
          "timeouts",
          "DeviceStatusMonitoringService",
          "GetDeviceActivityStatusAsync",
          "GetAllDeviceActivityStatusAsync",
          "UpdateDeviceActivityAsync",
          "if",
          "if",
          "UpdateDeviceStatusInDatabaseAsync",
          "catch",
          "CheckAndUpdateDeviceStatusesAsync",
          "topics",
          "foreach",
          "if",
          "if",
          "UpdateDeviceStatusInDatabaseAsync",
          "if",
          "UpdateDeviceStatusInDatabaseAsync",
          "catch",
          "IsDeviceOnlineAsync",
          "if",
          "GetDevicesOnlineStatusAsync",
          "foreach",
          "if",
          "InitializeDeviceMonitoringAsync",
          "foreach",
          "if",
          "catch",
          "UpdateDeviceStatusInDatabaseAsync",
          "if",
          "catch"
        ],
        "interfaces": [
          "IDeviceStatusMonitoringService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<DeviceStatusMonitoringService>",
          "IConfiguration"
        ]
      },
      {
        "name": "EmergencyReportService",
        "description": "State buffer untuk tracking status sebelumnya",
        "methods": [
          "new",
          "new",
          "EmergencyReportService",
          "ProcessEmergencyStatusAsync",
          "lock",
          "if",
          "if",
          "StartEmergencyAsync",
          "EndEmergencyAsync",
          "catch",
          "StartEmergencyAsync",
          "GetActiveEmergencyAsync",
          "if",
          "EndEmergencyAsync",
          "GetActiveEmergencyAsync",
          "if",
          "GetActiveEmergencyAsync",
          "CloseActiveEmergencyAsync",
          "GetActiveEmergencyAsync",
          "if",
          "EndEmergencyAsync",
          "GetEmergencyReportsAsync",
          "if",
          "if",
          "if",
          "if",
          "GetEmergencyReportSummaryAsync",
          "if",
          "if",
          "foreach",
          "if",
          "GetActiveEmergencyAsync",
          "if"
        ],
        "interfaces": [
          "IEmergencyReportService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<EmergencyReportService>"
        ]
      },
      {
        "name": "FileService",
        "description": "5MB",
        "methods": [
          "FileService",
          "if",
          "SaveUserPhotoAsync",
          "if",
          "ArgumentException",
          "foreach",
          "catch",
          "using",
          "catch",
          "DeleteUserPhotoAsync",
          "if",
          "GetDefaultPhotoPath",
          "if",
          "catch",
          "GetUserPhotoAsync",
          "if",
          "if",
          "GetContentType",
          "FileContentResult",
          "catch",
          "IsValidImageFile",
          "if",
          "if",
          "if",
          "if",
          "GetUserPhotoFileAsync",
          "if",
          "GetDefaultPhotoPath",
          "if",
          "GetContentType",
          "FileStreamFormFile",
          "catch",
          "GetDefaultPhotoPath",
          "GetContentType",
          "FileStreamFormFile",
          "HeaderDictionary",
          "CopyTo",
          "CopyToAsync",
          "OpenReadStream",
          "Dispose"
        ],
        "interfaces": [
          "IFileService"
        ],
        "dependencies": [
          "IWebHostEnvironment",
          "ILogger<FileService>"
        ]
      },
      {
        "name": "IAccessLogService",
        "description": "",
        "methods": [
          "GetAllAccessLogsAsync",
          "GetAccessLogsAsync",
          "GetAccessLogByIdAsync",
          "CreateAccessLogAsync",
          "LogSoftwareAccessAsync",
          "GetAccessLogsByViaAsync",
          "GetAccessLogsByUserAsync",
          "GetAccessLogSummaryAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IActivityReportService",
        "description": "",
        "methods": [
          "GetAllActivityReportsAsync",
          "GetActivityReportsByDateRangeAsync",
          "GetActivityReportsByStatusAsync",
          "GetActivityReportsByTriggerAsync",
          "GetActivityReportByIdAsync",
          "CreateActivityReportAsync",
          "DeleteActivityReportByIdAsync",
          "DeleteAllActivityReportsAsync",
          "GetTotalActivityReportsCountAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IAuthService",
        "description": "",
        "methods": [
          "AuthenticateAsync",
          "RegisterAsync",
          "HashPassword",
          "VerifyPassword",
          "FindUserForPasswordResetAsync",
          "ResetPasswordAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IBackupService",
        "description": "",
        "methods": [
          "CreateBackupAsync",
          "CreateBackupAsync",
          "GetBackupDirectoryAsync",
          "GetAvailableBackupsAsync",
          "DeleteOldBackupsAsync",
          "GetLastBackupDateAsync",
          "IsBackupDueAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "ICameraConfigService",
        "description": "",
        "methods": [
          "GetAllCameraConfigsAsync",
          "GetCameraConfigByIdAsync",
          "CreateCameraConfigAsync",
          "UpdateCameraConfigAsync",
          "DeleteCameraConfigAsync",
          "CameraConfigExistsAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IContainmentControlService",
        "description": "",
        "methods": [
          "SendToggleCommandAsync",
          "GetControlHistoryAsync",
          "GetAllControlHistoryAsync",
          "GetMqttTogglePayload"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IContainmentService",
        "description": "",
        "methods": [
          "GetAllContainmentsAsync",
          "GetContainmentByIdAsync",
          "CreateContainmentAsync",
          "UpdateContainmentAsync",
          "DeleteContainmentAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IContainmentStatusService",
        "description": "",
        "methods": [
          "GetStatusByContainmentIdAsync",
          "CreateOrUpdateStatusAsync",
          "ProcessMqttPayloadAsync",
          "GetAllStatusesAsync",
          "InitializeDefaultStatusAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IDeviceActivityService",
        "description": "/ Updates device status based on MQTT data activity\n        /",
        "methods": [
          "UpdateDeviceActivityStatusAsync",
          "IsDeviceActiveAsync",
          "GetDeviceActivityAsync",
          "UpdateSingleDeviceActivityAsync",
          "GetAllDevicesActivityAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IDeviceSensorDataService",
        "description": "Data retrieval with pagination and filtering",
        "methods": [
          "GetSensorDataAsync",
          "GetSensorDataByDeviceIdAsync",
          "GetSensorDataByRackIdAsync",
          "GetSensorDataByContainmentIdAsync",
          "GetLatestSensorDataAsync",
          "GetLatestSensorDataByDeviceAsync",
          "StoreSensorDataAsync",
          "ParseAndStoreSensorDataAsync",
          "GetSensorStatisticsAsync",
          "GetDataHistoryAsync",
          "GetAggregatedDataAsync",
          "GetAvailableSensorTypesAsync",
          "GetSensorDataSummaryAsync",
          "GetActiveTopicsAsync",
          "GetTopicsByContainmentAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IDeviceService",
        "description": "",
        "methods": [
          "GetAllDevicesAsync",
          "GetDevicesByRackIdAsync",
          "GetDeviceByIdAsync",
          "CreateDeviceAsync",
          "UpdateDeviceAsync",
          "DeleteDeviceAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IDeviceStatusMonitoringService",
        "description": "",
        "methods": [
          "GetDeviceActivityStatusAsync",
          "GetAllDeviceActivityStatusAsync",
          "UpdateDeviceActivityAsync",
          "CheckAndUpdateDeviceStatusesAsync",
          "IsDeviceOnlineAsync",
          "GetDevicesOnlineStatusAsync",
          "InitializeDeviceMonitoringAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IEmergencyReportService",
        "description": "",
        "methods": [
          "ProcessEmergencyStatusAsync",
          "GetEmergencyReportsAsync",
          "GetEmergencyReportSummaryAsync",
          "GetActiveEmergencyAsync",
          "CloseActiveEmergencyAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IFileService",
        "description": "",
        "methods": [
          "SaveUserPhotoAsync",
          "DeleteUserPhotoAsync",
          "GetUserPhotoAsync",
          "GetUserPhotoFileAsync",
          "IsValidImageFile",
          "GetDefaultPhotoPath"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IJwtService",
        "description": "",
        "methods": [
          "GenerateToken",
          "ValidateToken"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IMaintenanceService",
        "description": "",
        "methods": [
          "GetAllMaintenancesAsync",
          "GetMaintenancesByTargetAsync",
          "GetMaintenancesByAssigneeAsync",
          "GetMaintenancesForCalendarAsync",
          "GetMaintenanceByIdAsync",
          "CreateMaintenanceAsync",
          "UpdateMaintenanceAsync",
          "DeleteMaintenanceAsync",
          "UpdateMaintenanceStatusAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IMqttConfigurationService",
        "description": "",
        "methods": [
          "GetActiveConfigurationAsync",
          "GetAllConfigurationsAsync",
          "GetConfigurationByIdAsync",
          "CreateConfigurationAsync",
          "UpdateConfigurationAsync",
          "DeleteConfigurationAsync",
          "SetActiveConfigurationAsync",
          "ToggleMqttAsync",
          "GetEffectiveConfigurationAsync",
          "TestConnectionAsync",
          "GetAllConnectionStatusAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IMqttService",
        "description": "",
        "methods": [
          "ConnectAsync",
          "DisconnectAsync",
          "ReconnectWithNewConfigAsync",
          "PublishAsync",
          "SubscribeAsync",
          "UnsubscribeAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "INetworkConfigurationService",
        "description": "Network interface file operations",
        "methods": [
          "GetAllConfigurationsAsync",
          "GetConfigurationByIdAsync",
          "GetConfigurationByInterfaceAsync",
          "CreateConfigurationAsync",
          "UpdateConfigurationAsync",
          "DeleteConfigurationAsync",
          "ReadNetworkInterfacesFileAsync",
          "WriteNetworkInterfacesFileAsync",
          "ApplyNetworkConfigurationAsync",
          "RestartNetworkingServiceAsync",
          "BackupNetworkConfigAsync",
          "RestoreNetworkConfigAsync",
          "GetNetworkInterfaceStatusAsync",
          "ValidateNetworkConfigurationAsync",
          "TestConnectivityAsync",
          "RevertInterfaceToDhcpAsync",
          "ClearAllStaticConfigurationsAsync",
          "ParseNetworkInterfacesFileAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IpScannerService",
        "description": "Menggunakan model data yang baru",
        "methods": [
          "GetLocalNetworkPrefix",
          "foreach",
          "if",
          "if",
          "catch",
          "IsHostUpAsync",
          "using",
          "catch",
          "GetMacAddress",
          "foreach",
          "if",
          "if",
          "catch",
          "GetManufacturer",
          "if",
          "OUI",
          "pertama",
          "if",
          "ScanOpenPortsAsync",
          "foreach",
          "using",
          "if",
          "if",
          "lock",
          "ScanLocalNetworkAsync",
          "GetLocalNetworkPrefix",
          "for",
          "lengkap",
          "ProcessDeviceAsync",
          "if",
          "GetMacAddress",
          "GetManufacturer",
          "ScanOpenPortsAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IRackService",
        "description": "",
        "methods": [
          "GetAllRacksAsync",
          "GetRacksByContainmentIdAsync",
          "GetRackByIdAsync",
          "CreateRackAsync",
          "UpdateRackAsync",
          "DeleteRackAsync",
          "DeleteRacksByContainmentIdAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "ISystemConfigService",
        "description": "System Configuration",
        "methods": [
          "GetActiveSystemConfigAsync",
          "CreateSystemConfigAsync",
          "UpdateSystemConfigAsync",
          "DeleteSystemConfigAsync",
          "SetActiveSystemConfigAsync",
          "GetAllSystemConfigsAsync",
          "PublishSystemConfigChangeAsync",
          "PublishSystemConfigValueAsync",
          "PublishEmergencyTempToggleAsync",
          "RequestCurrentSystemConfigAsync",
          "GetActivePinConfigAsync",
          "CreatePinConfigAsync",
          "UpdatePinConfigAsync",
          "DeletePinConfigAsync",
          "SetActivePinConfigAsync",
          "GetAllPinConfigsAsync",
          "RequestCurrentPinConfigAsync",
          "PublishPinConfigChangeAsync",
          "ValidatePinConfigAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "ISystemInfoService",
        "description": "",
        "methods": [
          "GetSystemInfoAsync",
          "ClearCache"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "IUserService",
        "description": "",
        "methods": [
          "GetAllUsersAsync",
          "GetUserByIdAsync",
          "CreateUserAsync",
          "UpdateUserAsync",
          "DeleteUserAsync",
          "UserExistsAsync"
        ],
        "interfaces": [],
        "dependencies": []
      },
      {
        "name": "JwtService",
        "description": "Use RoleName property for compatibility",
        "methods": [
          "JwtService",
          "GenerateToken",
          "JwtSecurityTokenHandler",
          "Claim",
          "Claim",
          "Claim",
          "Claim",
          "Claim",
          "Claim",
          "if",
          "Claim",
          "Claim",
          "Claim",
          "Claim",
          "ClaimsIdentity",
          "SigningCredentials",
          "ValidateToken",
          "JwtSecurityTokenHandler",
          "SymmetricSecurityKey"
        ],
        "interfaces": [
          "IJwtService"
        ],
        "dependencies": [
          "IConfiguration"
        ]
      },
      {
        "name": "MaintenanceNotificationService",
        "description": "/ Send WhatsApp notification when maintenance is assigned to a user\r\n        /",
        "methods": [
          "SendMaintenanceAssignmentNotificationAsync",
          "SendMaintenanceReminderNotificationAsync",
          "CheckAndSendDailyRemindersAsync",
          "MaintenanceNotificationService",
          "SendMaintenanceAssignmentNotificationAsync",
          "if",
          "if",
          "GetMaintenanceTargetNameAsync",
          "if",
          "if",
          "catch",
          "SendMaintenanceReminderNotificationAsync",
          "if",
          "if",
          "GetMaintenanceTargetNameAsync",
          "day",
          "if",
          "if",
          "catch",
          "reminders",
          "CheckAndSendDailyRemindersAsync",
          "foreach",
          "SendMaintenanceReminderNotificationAsync",
          "catch",
          "GetMaintenanceTargetNameAsync",
          "switch",
          "catch"
        ],
        "interfaces": [
          "IMaintenanceNotificationService"
        ],
        "dependencies": [
          "AppDbContext",
          "IWhatsAppService",
          "IConfiguration",
          "ILogger<MaintenanceNotificationService>"
        ]
      },
      {
        "name": "MaintenanceReminderHostedService",
        "description": "/ Background service that runs daily to check for maintenance reminders\r\n    / Runs every morning at configured time (default 8:00 AM)\r\n    /",
        "methods": [
          "time",
          "MaintenanceReminderHostedService",
          "DateTime",
          "if",
          "Timer",
          "ExecuteAsync",
          "while",
          "catch",
          "catch",
          "ExecuteReminderCheck",
          "catch",
          "Dispose"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "IServiceProvider",
          "ILogger<MaintenanceReminderHostedService>",
          "IConfiguration"
        ]
      },
      {
        "name": "MaintenanceService",
        "description": "Manually populate navigation properties based on TargetType",
        "methods": [
          "MaintenanceService",
          "GetAllMaintenancesAsync",
          "PopulateTargetNavigationPropertiesAsync",
          "GetMaintenancesByTargetAsync",
          "PopulateTargetNavigationPropertiesAsync",
          "GetMaintenancesByAssigneeAsync",
          "PopulateTargetNavigationPropertiesAsync",
          "GetMaintenancesForCalendarAsync",
          "if",
          "PopulateTargetNavigationPropertiesAsync",
          "GetMaintenanceByIdAsync",
          "if",
          "PopulateTargetNavigationPropertiesAsync",
          "CreateMaintenanceAsync",
          "GetMaintenanceByIdAsync",
          "catch",
          "UpdateMaintenanceAsync",
          "if",
          "GetMaintenanceByIdAsync",
          "UpdateMaintenanceStatusAsync",
          "if",
          "DeleteMaintenanceAsync",
          "if",
          "PopulateTargetNavigationPropertiesAsync",
          "foreach",
          "switch",
          "foreach",
          "if",
          "foreach",
          "if",
          "foreach",
          "if"
        ],
        "interfaces": [
          "IMaintenanceService"
        ],
        "dependencies": [
          "AppDbContext",
          "IMaintenanceNotificationService",
          "ILogger<MaintenanceService>"
        ]
      },
      {
        "name": "MqttConfigurationService",
        "description": "If this is the first configuration or if it's set as active, deactivate others",
        "methods": [
          "MqttConfigurationService",
          "GetActiveConfigurationAsync",
          "GetAllConfigurationsAsync",
          "GetConfigurationByIdAsync",
          "CreateConfigurationAsync",
          "if",
          "foreach",
          "GetConfigurationByIdAsync",
          "UpdateConfigurationAsync",
          "if",
          "GetConfigurationByIdAsync",
          "DeleteConfigurationAsync",
          "if",
          "SetActiveConfigurationAsync",
          "if",
          "foreach",
          "ToggleMqttAsync",
          "GetActiveConfigurationAsync",
          "if",
          "GetEffectiveConfigurationAsync",
          "GetActiveConfigurationAsync",
          "configuration",
          "if",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "GetFallbackValue",
          "if",
          "return",
          "typeof",
          "if",
          "return",
          "typeof",
          "catch",
          "GetAllConnectionStatusAsync",
          "GetAllConfigurationsAsync",
          "foreach",
          "if",
          "TestConnectionAsync",
          "TestConnectionAsync",
          "MqttClientFactory",
          "MqttClientOptionsBuilder",
          "if",
          "if",
          "if",
          "catch"
        ],
        "interfaces": [
          "IMqttConfigurationService"
        ],
        "dependencies": [
          "AppDbContext",
          "IConfiguration",
          "ILogger<MqttConfigurationService>"
        ]
      },
      {
        "name": "MqttDeviceSubscriptionService",
        "description": "Keep the service running and check connection every 30 seconds",
        "methods": [
          "MqttDeviceSubscriptionService",
          "ExecuteAsync",
          "while",
          "ConnectAndSubscribeToDeviceTopics",
          "catch",
          "catch",
          "DisconnectAsync",
          "ConnectAndSubscribeToDeviceTopics",
          "if",
          "if",
          "ConnectToMqttBroker",
          "SubscribeToDeviceTopics",
          "catch",
          "ConnectToMqttBroker",
          "MqttClientFactory",
          "MqttClientOptionsBuilder",
          "if",
          "if",
          "SubscribeToDeviceTopics",
          "foreach",
          "GenerateDeviceTopics",
          "foreach",
          "MqttClientSubscribeOptionsBuilder",
          "catch",
          "GenerateDeviceTopics",
          "patterns",
          "patterns",
          "OnMessageReceived",
          "ExtractDeviceIdFromTopic",
          "if",
          "catch",
          "ExtractDeviceIdFromTopic",
          "foreach",
          "if",
          "foreach",
          "if",
          "if",
          "catch",
          "OnDisconnected",
          "if",
          "DisconnectAsync",
          "if",
          "Dispose"
        ],
        "interfaces": [
          "BackgroundService"
        ],
        "dependencies": [
          "IServiceProvider",
          "ILogger<MqttDeviceSubscriptionService>"
        ]
      },
      {
        "name": "MqttService",
        "description": "Will be checked dynamically from database",
        "methods": [
          "MqttService",
          "ConnectAsync",
          "using",
          "if",
          "if",
          "MqttClientFactory",
          "MqttClientOptionsBuilder",
          "if",
          "if",
          "Secure",
          "if",
          "ArgumentException",
          "if",
          "if",
          "if",
          "catch",
          "DisconnectAsync",
          "if",
          "catch",
          "ReconnectWithNewConfigAsync",
          "DisconnectAsync",
          "ConnectAsync",
          "catch",
          "PublishAsync",
          "if",
          "if",
          "InvalidOperationException",
          "MqttApplicationMessageBuilder",
          "catch",
          "SubscribeAsync",
          "if",
          "if",
          "InvalidOperationException",
          "MqttClientSubscribeOptionsBuilder",
          "catch",
          "UnsubscribeAsync",
          "if",
          "InvalidOperationException",
          "MqttClientUnsubscribeOptionsBuilder",
          "catch",
          "OnMessageReceived",
          "TrackDeviceActivityFromTopicAsync",
          "if",
          "handler",
          "foreach",
          "if",
          "if",
          "patternHandler",
          "catch",
          "TrackDeviceActivityFromTopicAsync",
          "if",
          "device",
          "foreach",
          "if",
          "device",
          "catch",
          "IsTopicMatch",
          "if",
          "for",
          "if",
          "if",
          "if",
          "OnConnected",
          "OnDisconnected",
          "Dispose",
          "if",
          "catch"
        ],
        "interfaces": [
          "IMqttService",
          "IDisposable"
        ],
        "dependencies": [
          "ILogger<MqttService>",
          "IConfiguration",
          "IServiceScopeFactory"
        ]
      },
      {
        "name": "NetworkConfigurationService",
        "description": "Check if configuration already exists for this interface",
        "methods": [
          "NetworkConfigurationService",
          "GetAllConfigurationsAsync",
          "GetConfigurationByIdAsync",
          "GetConfigurationByInterfaceAsync",
          "CreateConfigurationAsync",
          "GetConfigurationByInterfaceAsync",
          "if",
          "InvalidOperationException",
          "if",
          "ArgumentException",
          "UpdateConfigurationAsync",
          "GetConfigurationByIdAsync",
          "if",
          "if",
          "ArgumentException",
          "DeleteConfigurationAsync",
          "GetConfigurationByIdAsync",
          "if",
          "ReadNetworkInterfacesFileAsync",
          "if",
          "catch",
          "WriteNetworkInterfacesFileAsync",
          "BackupNetworkConfigAsync",
          "GenerateInterfacesFileContent",
          "permissions",
          "ExecuteCommandAsync",
          "catch",
          "GenerateInterfacesFileContent",
          "StringBuilder",
          "interfaces",
          "foreach",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "ApplyNetworkConfigurationAsync",
          "if",
          "BackupNetworkConfigAsync",
          "GetAllConfigurationsAsync",
          "WriteNetworkInterfacesFileAsync",
          "if",
          "RestartNetworkingServiceAsync",
          "catch",
          "RestartNetworkingServiceAsync",
          "foreach",
          "ExecuteCommandAsync",
          "if",
          "catch",
          "BackupNetworkConfigAsync",
          "if",
          "if",
          "catch",
          "RestoreNetworkConfigAsync",
          "if",
          "if",
          "catch",
          "GetNetworkInterfaceStatusAsync",
          "foreach",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "catch",
          "ValidateNetworkConfigurationAsync",
          "if",
          "if",
          "if",
          "gateway",
          "if",
          "servers",
          "if",
          "if",
          "TestConnectivityAsync",
          "Ping",
          "catch",
          "RevertInterfaceToDhcpAsync",
          "GetConfigurationByInterfaceAsync",
          "if",
          "UpdateConfigurationAsync",
          "CreateConfigurationAsync",
          "catch",
          "ClearAllStaticConfigurationsAsync",
          "GetAllConfigurationsAsync",
          "foreach",
          "RevertInterfaceToDhcpAsync",
          "catch",
          "ParseNetworkInterfacesFileAsync",
          "ReadNetworkInterfacesFileAsync",
          "if",
          "foreach",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "if",
          "catch",
          "ExecuteCommandAsync",
          "if",
          "catch"
        ],
        "interfaces": [
          "INetworkConfigurationService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<NetworkConfigurationService>"
        ]
      },
      {
        "name": "RackService",
        "description": "Reactivate if updating",
        "methods": [
          "RackService",
          "GetAllRacksAsync",
          "GetRacksByContainmentIdAsync",
          "GetRackByIdAsync",
          "CreateRackAsync",
          "GetRackByIdAsync",
          "UpdateRackAsync",
          "if",
          "GetRackByIdAsync",
          "DeleteRackAsync",
          "if",
          "foreach",
          "DeleteRacksByContainmentIdAsync",
          "foreach",
          "foreach"
        ],
        "interfaces": [
          "IRackService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "RoleMappingService",
        "description": "Services/RoleMappingService.cs",
        "methods": [
          "GetDatabaseRoleFromEnumAsync",
          "GetPermissionsForUserAsync",
          "GetUserPermissionNamesAsync",
          "HasPermissionAsync",
          "InitializeDefaultRolesAsync",
          "RoleMappingService",
          "GetDatabaseRoleFromEnumAsync",
          "catch",
          "GetPermissionsForUserAsync",
          "if",
          "GetDatabaseRoleFromEnumAsync",
          "if",
          "catch",
          "GetUserPermissionNamesAsync",
          "GetPermissionsForUserAsync",
          "HasPermissionAsync",
          "GetUserPermissionNamesAsync",
          "InitializeDefaultRolesAsync",
          "if",
          "InitializeDefaultPermissionsAsync",
          "catch",
          "InitializeDefaultPermissionsAsync",
          "AssignPermissionsToRolesAsync",
          "AssignPermissionsToRolesAsync",
          "if",
          "foreach",
          "foreach",
          "foreach"
        ],
        "interfaces": [
          "IRoleMappingService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<RoleMappingService>"
        ]
      },
      {
        "name": "RoleMigrationService",
        "description": "Check if there are users without RoleId set but with enum Role",
        "methods": [
          "MigrateExistingUsersToNewRoleSystemAsync",
          "CheckMigrationStatusAsync",
          "GetUnmigratedUsersCountAsync",
          "RoleMigrationService",
          "CheckMigrationStatusAsync",
          "GetUnmigratedUsersCountAsync",
          "catch",
          "GetUnmigratedUsersCountAsync",
          "MigrateExistingUsersToNewRoleSystemAsync",
          "if",
          "foreach",
          "if",
          "role",
          "if",
          "catch",
          "if",
          "if",
          "catch"
        ],
        "interfaces": [
          "IRoleMigrationService"
        ],
        "dependencies": [
          "AppDbContext",
          "ILogger<RoleMigrationService>"
        ]
      },
      {
        "name": "SensorDataSimulatorService",
        "description": "Get all sensor devices",
        "methods": [
          "SensorDataSimulatorService",
          "GenerateSampleSensorDataAsync",
          "if",
          "Random",
          "foreach",
          "for",
          "for",
          "for",
          "for",
          "catch",
          "GetSensorDataStatisticsAsync",
          "catch"
        ],
        "interfaces": [],
        "dependencies": [
          "AppDbContext",
          "ILogger<SensorDataSimulatorService>"
        ]
      },
      {
        "name": "SystemInfoService",
        "description": "Cache for 10 seconds",
        "methods": [
          "SystemInfoService",
          "GetSystemInfoAsync",
          "if",
          "if",
          "GetLinuxInfo",
          "if",
          "GetWindowsInfo",
          "catch",
          "GetLinuxInfo",
          "ExecuteShellCommand",
          "if",
          "catch",
          "foreach",
          "ExecuteShellCommand",
          "if",
          "catch",
          "ExecuteShellCommand",
          "if",
          "catch",
          "Info",
          "ExecuteShellCommand",
          "if",
          "catch",
          "ExecuteShellCommand",
          "if",
          "catch",
          "GetIpAddress",
          "GetIpAddress",
          "catch",
          "GetWindowsInfo",
          "if",
          "PerformanceCounter",
          "catch",
          "catch",
          "if",
          "catch",
          "catch",
          "if",
          "if",
          "catch",
          "catch",
          "GetIpAddress",
          "ExecuteShellCommand",
          "catch",
          "ExecuteShellCommand",
          "CancellationTokenSource",
          "if",
          "catch",
          "ClearCache"
        ],
        "interfaces": [
          "ISystemInfoService"
        ],
        "dependencies": [
          "ILogger<SystemInfoService>",
          "IMemoryCache"
        ]
      },
      {
        "name": "UserService",
        "description": "First, update all records that reference this user to set foreign keys to null or another user",
        "methods": [
          "UserService",
          "GetAllUsersAsync",
          "GetUserByIdAsync",
          "CreateUserAsync",
          "UpdateUserAsync",
          "if",
          "DeleteUserAsync",
          "if",
          "user",
          "user",
          "catch",
          "UserExistsAsync"
        ],
        "interfaces": [
          "IUserService"
        ],
        "dependencies": [
          "AppDbContext"
        ]
      },
      {
        "name": "WhatsAppService",
        "description": "/ Send a simple text message via WhatsApp using Qontak API\n        /",
        "methods": [
          "SendMessageAsync",
          "SendTemplateMessageAsync",
          "SendStartupMessageAsync",
          "WhatsAppService",
          "code",
          "SendMessageAsync",
          "if",
          "number",
          "FormatPhoneNumber",
          "StringContent",
          "if",
          "catch",
          "code",
          "SendTemplateMessageAsync",
          "number",
          "FormatPhoneNumber",
          "StringContent",
          "if",
          "catch",
          "SendStartupMessageAsync",
          "SendMessageAsync",
          "if",
          "FormatPhoneNumber",
          "if",
          "string",
          "if",
          "if",
          "if"
        ],
        "interfaces": [
          "IWhatsAppService"
        ],
        "dependencies": [
          "HttpClient",
          "IConfiguration",
          "ILogger<WhatsAppService>"
        ]
      }
    ],
    "migrations": [
      {
        "name": "20250903101405_Cohys",
        "timestamp": "20250903101405",
        "description": "/ <inheritdoc />",
        "tables": [
          "AccessLogs",
          "CameraConfigs",
          "EmergencyReports",
          "MenuGroups",
          "Permissions",
          "Roles",
          "MenuItems",
          "RolePermissions",
          "Users",
          "MenuPermissions",
          "ActivityReports",
          "Containments",
          "Maintenances",
          "MqttConfigurations",
          "NetworkConfigurations",
          "ScanConfigurations",
          "SensorConfigurations",
          "UserRoles",
          "ContainmentControls",
          "ContainmentStatuses",
          "Racks",
          "Devices",
          "DeviceActivityStatuses",
          "DeviceSensorData"
        ],
        "operations": [
          {
            "type": "CreateTable",
            "count": 24
          },
          {
            "type": "DropTable",
            "count": 24
          },
          {
            "type": "CreateIndex",
            "count": 88
          }
        ]
      },
      {
        "name": "20250903101405_Cohys.Designer",
        "timestamp": "20250903101405",
        "description": "<auto-generated />",
        "tables": [],
        "operations": []
      },
      {
        "name": "AppDbContextModelSnapshot",
        "timestamp": "",
        "description": "<auto-generated />",
        "tables": [],
        "operations": []
      }
    ]
  },
  "frontend": {
    "pages": [
      {
        "name": "page",
        "path": "/Frontend/app/access-control/device/page.tsx",
        "url": "/access-control/device",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Breadcrumb",
          "BreadcrumbItem",
          "BreadcrumbLink",
          "BreadcrumbList",
          "BreadcrumbPage",
          "BreadcrumbSeparator",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Alert",
          "AlertDescription",
          "Badge",
          "DeviceList",
          "DeviceForm"
        ],
        "hooks": [
          "useState",
          "useAuthGuard",
          "useMQTT",
          "useZKTecoDevices"
        ],
        "requiresAuth": true,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/access-control/devices/page.tsx",
        "url": "/access-control/devices",
        "description": "Access Control Devices",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Badge",
          "Table",
          "TableBody",
          "TableCell",
          "TableHead",
          "TableHeader",
          "TableRow",
          "DeveloperModeGuard"
        ],
        "hooks": [
          "useState",
          "useEffect"
        ],
        "requiresAuth": false,
        "developerMode": true
      },
      {
        "name": "page",
        "path": "/Frontend/app/access-control/monitoring/page.tsx",
        "url": "/access-control/monitoring",
        "description": "Access Control Monitoring",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Badge",
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "DeveloperModeGuard"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "users",
          "userId",
          "user",
          "user_id"
        ],
        "requiresAuth": false,
        "developerMode": true
      },
      {
        "name": "page",
        "path": "/Frontend/app/access-control/page.tsx",
        "url": "/access-control",
        "description": "Device Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Button",
          "Badge",
          "DeveloperModeGuard"
        ],
        "hooks": [
          "useAuthGuard",
          "useMQTT",
          "useZKTecoDevices",
          "users",
          "user"
        ],
        "requiresAuth": true,
        "developerMode": true
      },
      {
        "name": "page",
        "path": "/Frontend/app/access-control/users/page.tsx",
        "url": "/access-control/users",
        "description": "Access Control Users",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Input",
          "Label",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Badge",
          "Dialog",
          "DialogContent",
          "DialogHeader",
          "DialogTitle",
          "DialogTrigger",
          "AlertDialog",
          "AlertDialogAction",
          "AlertDialogCancel",
          "AlertDialogContent",
          "AlertDialogDescription",
          "AlertDialogFooter",
          "AlertDialogHeader",
          "AlertDialogTitle",
          "AlertDialogTrigger",
          "Table",
          "TableBody",
          "TableCell",
          "TableHead",
          "TableHeader",
          "TableRow",
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "DeveloperModeGuard"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "users",
          "user_data",
          "user_id",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": true
      },
      {
        "name": "page",
        "path": "/Frontend/app/auth/forgot-password/page.tsx",
        "url": "/auth/forgot-password",
        "description": "Verification Successful",
        "components": [
          "Input",
          "Button",
          "Label",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle"
        ],
        "hooks": [
          "useState",
          "useRouter",
          "userId"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/auth/login/page.tsx",
        "url": "/auth/login",
        "description": "",
        "components": [
          "Input",
          "Button",
          "Label",
          "ThemeAvatar"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useRouter",
          "useTheme",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/auth/register/page.tsx",
        "url": "/auth/register",
        "description": "",
        "components": [
          "Input",
          "Button",
          "Label"
        ],
        "hooks": [
          "useState",
          "useRouter",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/control/containment/page.tsx",
        "url": "/control/containment",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Switch",
          "Label",
          "Badge",
          "MQTTTroubleshootingGuide",
          "MQTTConnectionBadge",
          "UserActivityWidget"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMQTTPublish",
          "useMQTTStatus",
          "useMQTTConnection",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/dashboard/page.tsx",
        "url": "/dashboard",
        "description": "{appName}",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "RealtimeClock",
          "Refresh",
          "DashboardCarousel",
          "DashboardSettingsShortcut"
        ],
        "hooks": [
          "usel",
          "useIsMobile"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/dashboard-overview/page.tsx",
        "url": "/dashboard-overview",
        "description": "IOT Containment Monitoring",
        "components": [
          "Separator",
          "SidebarInset",
          "SidebarTrigger"
        ],
        "hooks": [
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/developer/page.tsx",
        "url": "/developer",
        "description": "Developer Mode",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Badge",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Alert",
          "AlertDescription",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "DeveloperModeDialog",
          "DeveloperModeGuard"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useDeveloperMode"
        ],
        "requiresAuth": false,
        "developerMode": true
      },
      {
        "name": "page",
        "path": "/Frontend/app/info/page.tsx",
        "url": "/info",
        "description": "System Information",
        "components": [
          "Button",
          "Separator",
          "SidebarInset",
          "SidebarTrigger",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "SessionInfo",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Badge",
          "Progress"
        ],
        "hooks": [
          "useBackendStatus",
          "useEffect",
          "useState"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/camera/page.tsx",
        "url": "/management/camera",
        "description": "CCTV Camera Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Badge",
          "Button",
          "Input",
          "Label"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useRef",
          "useRouter",
          "useSortableTable"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/containments/page.tsx",
        "url": "/management/containments",
        "description": "Containment Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "Textarea",
          "Switch"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useSortableTable",
          "useSearchFilter",
          "useRouter",
          "usePermissions"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/devices/page.tsx",
        "url": "/management/devices",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "Textarea",
          "DeviceStatusBadge"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useSearchParams",
          "useRouter",
          "useSortableTable",
          "useSearchFilter",
          "useDeviceStatus",
          "usePermissions",
          "uses"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/devices/rack/page.tsx",
        "url": "/management/devices/rack",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "Textarea"
        ],
        "hooks": [
          "useSearchParams",
          "useRouter",
          "useEffect",
          "useState",
          "useSortableTable",
          "useSearchFilter",
          "usePermissions"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/maintenance/page.tsx",
        "url": "/management/maintenance",
        "description": "Maintenance Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Input",
          "Label",
          "Textarea",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Table",
          "TableBody",
          "TableCell",
          "TableHead",
          "TableHeader",
          "TableRow",
          "Badge",
          "Dialog",
          "DialogContent",
          "DialogDescription",
          "DialogFooter",
          "DialogHeader",
          "DialogTitle",
          "DialogTrigger",
          "AlertDialog",
          "AlertDialogAction",
          "AlertDialogCancel",
          "AlertDialogContent",
          "AlertDialogDescription",
          "AlertDialogFooter",
          "AlertDialogHeader",
          "AlertDialogTitle",
          "AlertDialogTrigger",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Calendar",
          "Popover",
          "PopoverContent",
          "PopoverTrigger"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "usePermissions",
          "usersApi",
          "users",
          "user",
          "usersRes"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/menu/page.tsx",
        "url": "/management/menu",
        "description": "Menu Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Badge",
          "Input",
          "Label",
          "Switch",
          "Alert",
          "AlertDescription",
          "IconSelector"
        ],
        "hooks": [
          "useState",
          "useMenuManagement",
          "useDynamicMenu",
          "usePermissions",
          "users"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/racks/page.tsx",
        "url": "/management/racks",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "Textarea",
          "Switch"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useSearchParams",
          "useRouter",
          "useSortableTable",
          "useSearchFilter",
          "usePermissions"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/sensors/page.tsx",
        "url": "/management/sensors",
        "description": "",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "SensorDashboard"
        ],
        "hooks": [],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/user-activity/page.tsx",
        "url": "/management/user-activity",
        "description": "User Activity Monitor",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "UserActivityWidget"
        ],
        "hooks": [
          "user",
          "users"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/users/page.tsx",
        "url": "/management/users",
        "description": "User Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "ThemeAvatar"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "usersApi",
          "userPhotoApi",
          "useSortableTable",
          "useSearchFilter",
          "usePermissions",
          "users",
          "user",
          "userId",
          "userManagement"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/management/whatsapp/page.tsx",
        "url": "/management/whatsapp",
        "description": "WhatsApp Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Badge",
          "Button",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Label",
          "Textarea",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger"
        ],
        "hooks": [
          "useState",
          "useEffect"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/monitoring/sensors/page.tsx",
        "url": "/monitoring/sensors",
        "description": "",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Badge",
          "Button",
          "SidebarInset",
          "SidebarTrigger",
          "Separator"
        ],
        "hooks": [
          "useEffect",
          "useState"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/mqtt/page.tsx",
        "url": "/mqtt",
        "description": "Test Failed",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Input",
          "Label",
          "Textarea",
          "Switch",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Badge",
          "badgeVariants",
          "PageSkeleton"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useCallback",
          "uses",
          "useEnvironmentConfig",
          "username",
          "useSsl",
          "user",
          "useEnter"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/ip-address/page.tsx",
        "url": "/network/ip-address",
        "description": "Delete Configuration?",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Input",
          "Label",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Table",
          "TableBody",
          "TableCell",
          "TableHead",
          "TableHeader",
          "TableRow",
          "Badge",
          "Dialog",
          "DialogContent",
          "DialogDescription",
          "DialogFooter",
          "DialogHeader",
          "DialogTitle",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Textarea",
          "Alert",
          "AlertDescription"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "uses"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/ip-scanner/page.tsx",
        "url": "/network/ip-scanner",
        "description": "Network Scanner",
        "components": [
          "Button",
          "Progress",
          "SidebarInset",
          "SidebarTrigger",
          "Separator"
        ],
        "hooks": [
          "useState"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/page.tsx",
        "url": "/network",
        "description": "WiFi Management",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Badge"
        ],
        "hooks": [],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/protocol/modbus/page.tsx",
        "url": "/network/protocol/modbus",
        "description": "Are you sure?",
        "components": [
          "Input",
          "Button",
          "Separator",
          "SidebarInset",
          "SidebarTrigger",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "MqttStatus"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useCallback",
          "useRef",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/protocol/snmp/page.tsx",
        "url": "/network/protocol/snmp",
        "description": "Are you sure?",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Input",
          "Button",
          "Label",
          "Separator",
          "SidebarInset",
          "SidebarTrigger",
          "MqttStatus"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useCallback",
          "useRef",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/network/wifi/page.tsx",
        "url": "/network/wifi",
        "description": "Wi‑Fi Scanner",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Tabs",
          "TabsList",
          "TabsTrigger",
          "TabsContent",
          "Card",
          "CardHeader",
          "CardContent",
          "CardTitle",
          "Button",
          "Input",
          "MqttStatus"
        ],
        "hooks": [
          "useEffect",
          "useRef",
          "useState"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/page.tsx",
        "url": "/",
        "description": "",
        "components": [],
        "hooks": [
          "useEffect",
          "useRouter"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/reports/access-log/page.tsx",
        "url": "/reports/access-log",
        "description": "Access Log Reports",
        "components": [
          "Button",
          "Badge",
          "Input",
          "Label",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo",
          "useSortableTable",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/reports/emergency/page.tsx",
        "url": "/reports/emergency",
        "description": "Emergency Reports",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Badge",
          "Switch",
          "Input",
          "Label"
        ],
        "hooks": [
          "useState",
          "useEffect"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/reports/maintenance/page.tsx",
        "url": "/reports/maintenance",
        "description": "Maintenance Reports",
        "components": [
          "SidebarInset",
          "SidebarTrigger",
          "Separator",
          "Button",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Card",
          "CardContent",
          "CardDescription",
          "CardHeader",
          "CardTitle",
          "Table",
          "TableBody",
          "TableCell",
          "TableHead",
          "TableHeader",
          "TableRow",
          "Badge",
          "Calendar",
          "Popover",
          "PopoverContent",
          "PopoverTrigger"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "usersApi",
          "userId",
          "userName",
          "users",
          "usersRes",
          "userStats",
          "user"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/reports/sensor-data/page.tsx",
        "url": "/reports/sensor-data",
        "description": "Sensor Data Reports",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Input",
          "Label",
          "Badge",
          "Tabs",
          "TabsContent",
          "TabsList",
          "TabsTrigger"
        ],
        "hooks": [
          "useState",
          "useEffect"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/settings/setting/page.tsx",
        "url": "/settings/setting",
        "description": "General Settings",
        "components": [
          "Card",
          "CardHeader",
          "CardTitle",
          "CardContent",
          "Button",
          "Badge",
          "Separator",
          "SidebarInset",
          "SidebarTrigger",
          "Switch",
          "Label",
          "Select",
          "SelectContent",
          "SelectItem",
          "SelectTrigger",
          "SelectValue",
          "Tabs",
          "TabsList",
          "TabsTrigger",
          "TabsContent",
          "SystemConfigComponent",
          "PinConfigComponent"
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useRef",
          "useCallback",
          "useSearchParams",
          "useTheme",
          "useDashboardPreferences",
          "useMQTT",
          "uselMode",
          "used_memory",
          "used_disk",
          "usel"
        ],
        "requiresAuth": false,
        "developerMode": false
      },
      {
        "name": "page",
        "path": "/Frontend/app/test/page.tsx",
        "url": "/test",
        "description": "",
        "components": [
          "Card",
          "CardContent",
          "CardHeader",
          "CardTitle",
          "Button",
          "Input",
          "Separator"
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo"
        ],
        "requiresAuth": false,
        "developerMode": false
      }
    ],
    "components": [
      {
        "name": "app-sidebar",
        "path": "/Frontend/components/app-sidebar.tsx",
        "description": "\r\n              GSPE\r\n            ",
        "props": [],
        "hooks": [
          "useDeveloperMode",
          "useDynamicMenu",
          "userProfileApi",
          "usePathname",
          "useRouter",
          "useEffect",
          "useState",
          "useRef",
          "users",
          "user",
          "userId",
          "useEnter",
          "useLeave",
          "useenter",
          "useleave",
          "userRole"
        ],
        "dependencies": [
          "@/contexts/DeveloperModeContext",
          "@/hooks/useDynamicMenu",
          "@/lib/icon-mapping",
          "@/components/developer-mode-dialog",
          "@/components/jwt-token-info",
          "@/lib/api-service",
          "@/lib/config",
          "@/components/ui/button",
          "next/link",
          "next/navigation",
          "@radix-ui/react-separator",
          "cookies-next",
          "next/navigation",
          "react",
          "@/components/logout-confirmation",
          "@/components/ui/badge",
          "@/components/theme-avatar"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "backend-status-alert",
        "path": "/Frontend/components/backend-status-alert.tsx",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "optional": true
          },
          {
            "name": "showWhenOnline",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "autoHideDelay",
            "type": "number",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useBackendStatus"
        ],
        "dependencies": [
          "react",
          "@/components/ui/alert",
          "@/components/ui/badge",
          "@/components/ui/button",
          "@/hooks/useBackendStatus",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "cctv-widget-modern",
        "path": "/Frontend/components/cctv-widget-modern.tsx",
        "description": "\r\n            CCTV Feed - {streamItem.name}\r\n          ",
        "props": [
          {
            "name": "layout",
            "type": "\"1x1\" | \"2x2\" | \"3x3\" | \"4x2\" | \"auto\"",
            "optional": true
          }
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useRef",
          "useRouter"
        ],
        "dependencies": [
          "react",
          "next/navigation",
          "@/components/ui/button",
          "@/components/ui/card",
          "@/components/ui/badge",
          "sonner",
          "@/lib/api-service",
          "hls.js"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "cctv-wrapper-card",
        "path": "/Frontend/components/cctv-wrapper-card.tsx",
        "description": "{title}",
        "props": [
          {
            "name": "title",
            "type": "string",
            "optional": true
          },
          {
            "name": "description",
            "type": "string",
            "optional": true
          },
          {
            "name": "showHeader",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "defaultLayout",
            "type": "GridLayout",
            "optional": true
          },
          {
            "name": "compact",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useState"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/components/cctv-widget-modern"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "ClientLayout",
        "path": "/Frontend/components/ClientLayout.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useAuth",
          "usePathname",
          "useRoutePreloader"
        ],
        "dependencies": [
          "react",
          "@/components/ui/sidebar",
          "@/components/app-sidebar",
          "@/hooks/useAuth",
          "next/navigation",
          "sonner",
          "@/components/session-timeout-warning",
          "@/components/backend-status-alert",
          "@/contexts/DeveloperModeContext",
          "@/hooks/useRoutePreloader"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "containment-card-racks-tabs",
        "path": "/Frontend/components/containment-card-racks-tabs.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useEffect",
          "useState",
          "useSearchParams",
          "useRouter"
        ],
        "dependencies": [
          "react",
          "next/navigation",
          "@/components/ui/badge",
          "@/components/ui/button",
          "@/components/ui/card",
          "sonner",
          "@/lib/mqtt"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "containment-status-tabs",
        "path": "/Frontend/components/containment-status-tabs.tsx",
        "description": "{containment.name}",
        "props": [
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo",
          "useCallback",
          "uses"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/tabs",
          "@/components/ui/button",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dashboard-carousel",
        "path": "/Frontend/components/dashboard-carousel.tsx",
        "description": "",
        "props": [
          {
            "name": "components",
            "type": "React.ComponentType<any>[]",
            "optional": false
          },
          {
            "name": "componentNames",
            "type": "string[]",
            "optional": true
          },
          {
            "name": "autoPlayInterval",
            "type": "number",
            "optional": true
          },
          {
            "name": "showControls",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "showNavigationOnly",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useRef",
          "useDashboardPreferences",
          "uselProps",
          "usel",
          "uselMode",
          "useDashboardCarouselKeyboard"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/switch",
          "@/components/ui/label",
          "@/hooks/useDashboardPreferences"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dashboard-cctv-section",
        "path": "/Frontend/components/dashboard-cctv-section.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/cctv-wrapper-card"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dashboard-settings-shortcut",
        "path": "/Frontend/components/dashboard-settings-shortcut.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useDashboardPreferences",
          "uselMode",
          "usel"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/hooks/useDashboardPreferences",
          "lucide-react",
          "next/link"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dashboard-widgets",
        "path": "/Frontend/components/dashboard-widgets.tsx",
        "description": "Recent Alerts",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/progress"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "developer-mode-dialog",
        "path": "/Frontend/components/developer-mode-dialog.tsx",
        "description": "",
        "props": [
          {
            "name": "children",
            "type": "React.ReactNode",
            "optional": false
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useDeveloperMode"
        ],
        "dependencies": [
          "react",
          "@/components/ui/dialog",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/badge",
          "@/components/ui/alert",
          "@/contexts/DeveloperModeContext",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "developer-mode-guard",
        "path": "/Frontend/components/developer-mode-guard.tsx",
        "description": "",
        "props": [
          {
            "name": "children",
            "type": "React.ReactNode",
            "optional": false
          },
          {
            "name": "fallback",
            "type": "React.ReactNode",
            "optional": true
          }
        ],
        "hooks": [
          "useDeveloperMode",
          "useDynamicMenu"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/alert",
          "@/components/developer-mode-dialog",
          "@/contexts/DeveloperModeContext",
          "@/hooks/useDynamicMenu"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "device-status-badge",
        "path": "/Frontend/components/device-status-badge.tsx",
        "description": "",
        "props": [
          {
            "name": "status",
            "type": "DeviceActivityStatus",
            "optional": true
          },
          {
            "name": "deviceId",
            "type": "number",
            "optional": true
          },
          {
            "name": "showIcon",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "showTooltip",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "size",
            "type": "'sm' | 'default' | 'lg'",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [],
        "dependencies": [
          "react",
          "@/components/ui/badge",
          "@/components/ui/tooltip",
          "date-fns",
          "@/lib/api-service",
          "lucide-react"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dynamic-sidebar",
        "path": "/Frontend/components/dynamic-sidebar.tsx",
        "description": "\n              GSPE\n            ",
        "props": [],
        "hooks": [
          "useDeveloperMode",
          "userProfileApi",
          "usePathname",
          "useRouter",
          "useEffect",
          "useState",
          "useRef",
          "useDynamicMenu",
          "user",
          "userId",
          "useEnter",
          "useLeave",
          "useenter",
          "useleave",
          "userRole"
        ],
        "dependencies": [
          "@/contexts/DeveloperModeContext",
          "@/components/developer-mode-dialog",
          "@/components/jwt-token-info",
          "@/lib/api-service",
          "@/lib/config",
          "@/components/ui/button",
          "next/link",
          "next/navigation",
          "@radix-ui/react-separator",
          "cookies-next",
          "next/navigation",
          "react",
          "@/components/logout-confirmation",
          "@/components/ui/badge",
          "@/components/theme-avatar",
          "@/hooks/useDynamicMenu"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "error-boundary",
        "path": "/Frontend/components/error-boundary.tsx",
        "description": "",
        "props": [
          {
            "name": "children",
            "type": "React.ReactNode",
            "optional": false
          },
          {
            "name": "fallback",
            "type": "React.ComponentType<{ error?: Error",
            "optional": true
          }
        ],
        "hooks": [
          "useErrorBoundary",
          "useState",
          "useCallback",
          "useEffect"
        ],
        "dependencies": [
          "react",
          "lucide-react",
          "@/components/ui/button",
          "@/components/ui/alert"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "icon-selector",
        "path": "/Frontend/components/icon-selector.tsx",
        "description": "",
        "props": [
          {
            "name": "value",
            "type": "string",
            "optional": false
          },
          {
            "name": "onChange",
            "type": "(iconName: string) => void",
            "optional": false
          },
          {
            "name": "label",
            "type": "string",
            "optional": true
          },
          {
            "name": "placeholder",
            "type": "string",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/badge",
          "@/lib/icon-mapping",
          "lucide-react"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "iot-status-tabs",
        "path": "/Frontend/components/iot-status-tabs.tsx",
        "description": "",
        "props": [
          {
            "name": "containmentId",
            "type": "number",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "uses"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/tabs",
          "@/components/ui/badge",
          "@/components/ui/button",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "iot-status-widget",
        "path": "/Frontend/components/iot-status-widget.tsx",
        "description": "",
        "props": [
          {
            "name": "containmentId",
            "type": "number",
            "optional": false
          },
          {
            "name": "containmentName",
            "type": "string",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          },
          {
            "name": "showViewButton",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useRouter"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/button",
          "sonner",
          "next/navigation"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "iot-test-controls",
        "path": "/Frontend/components/iot-test-controls.tsx",
        "description": "",
        "props": [
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/components/ui/switch",
          "@/components/ui/label",
          "@/lib/api-service",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "jwt-token-info",
        "path": "/Frontend/components/jwt-token-info.tsx",
        "description": "",
        "props": [
          {
            "name": "showInHeader",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "compact",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useAuth",
          "user"
        ],
        "dependencies": [
          "react",
          "lucide-react",
          "@/components/ui/badge",
          "@/components/ui/button",
          "@/hooks/useAuth"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "loading-skeleton",
        "path": "/Frontend/components/loading-skeleton.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "@/components/ui/card",
          "@/components/ui/skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "logout-confirmation",
        "path": "/Frontend/components/logout-confirmation.tsx",
        "description": "",
        "props": [
          {
            "name": "isOpen",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "onClose",
            "type": "() => void",
            "optional": false
          },
          {
            "name": "onConfirm",
            "type": "() => void",
            "optional": false
          }
        ],
        "hooks": [],
        "dependencies": [
          "react",
          "lucide-react",
          "@/lib/auth-notifications"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "configuration-helper-dialog",
        "path": "/Frontend/components/mqtt/configuration-helper-dialog.tsx",
        "description": "{suggestion.title}",
        "props": [
          {
            "name": "isOpen",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "onClose",
            "type": "() => void",
            "optional": false
          },
          {
            "name": "configuration",
            "type": "MqttConfiguration | null",
            "optional": false
          },
          {
            "name": "connectionStatus",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useSsl"
        ],
        "dependencies": [
          "react",
          "@/components/ui/dialog",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/components/ui/card",
          "@/components/ui/alert",
          "@/lib/api-service"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-config-source-toggle",
        "path": "/Frontend/components/mqtt/mqtt-config-source-toggle.tsx",
        "description": "",
        "props": [
          {
            "name": "activeConfiguration",
            "type": "MqttConfiguration | null",
            "optional": false
          },
          {
            "name": "effectiveConfiguration",
            "type": "any",
            "optional": false
          },
          {
            "name": "onConfigurationChange",
            "type": "() => void",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEnvironmentConfig",
          "useDatabase"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/components/ui/alert",
          "@/components/ui/switch",
          "@/components/ui/label",
          "@/components/ui/tooltip",
          "@/lib/api-service",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-management",
        "path": "/Frontend/components/mqtt/mqtt-management.tsx",
        "description": "",
        "props": [
          {
            "name": "configurations",
            "type": "MqttConfiguration[]",
            "optional": false
          },
          {
            "name": "activeConfiguration",
            "type": "MqttConfiguration | null",
            "optional": false
          },
          {
            "name": "effectiveConfiguration",
            "type": "Record<string, any>",
            "optional": false
          },
          {
            "name": "connectionStatuses",
            "type": "Record<string, boolean>",
            "optional": true
          },
          {
            "name": "isLoading",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "onEdit",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "onView",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "onTest",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "onCreate",
            "type": "() => void",
            "optional": true
          },
          {
            "name": "testingConnection",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "onRefresh",
            "type": "() => void",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useMemo",
          "uses",
          "useEnvironmentConfig",
          "used"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/card",
          "@/components/ui/table",
          "@/components/ui/badge",
          "@/components/ui/alert-dialog",
          "sonner",
          "@/components/loading-skeleton",
          "@/components/mqtt/configuration-helper-dialog",
          "@/components/mqtt/mqtt-config-source-toggle",
          "@/components/ui/tooltip"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-overview",
        "path": "/Frontend/components/mqtt/mqtt-overview.tsx",
        "description": "",
        "props": [
          {
            "name": "activeConfiguration",
            "type": "MqttConfiguration | null",
            "optional": false
          },
          {
            "name": "effectiveConfiguration",
            "type": "Record<string, any>",
            "optional": false
          },
          {
            "name": "isLoading",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "onEdit",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "onView",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "onTest",
            "type": "(config: MqttConfiguration) => void",
            "optional": true
          },
          {
            "name": "testingConnection",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "onRefresh",
            "type": "() => void",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo",
          "useEnvironmentConfig",
          "used"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/switch",
          "@/components/ui/label",
          "sonner",
          "@/components/loading-skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-status-indicator",
        "path": "/Frontend/components/mqtt/mqtt-status-indicator.tsx",
        "description": "",
        "props": [
          {
            "name": "showDetails",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "compact",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "className",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMQTT"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/components/ui/button",
          "@/components/ui/tooltip",
          "@/components/ui/alert",
          "@/hooks/useMQTT"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-troubleshooting-guide",
        "path": "/Frontend/components/mqtt/mqtt-troubleshooting-guide.tsx",
        "description": "",
        "props": [
          {
            "name": "isVisible",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "connectionError",
            "type": "string",
            "optional": true
          },
          {
            "name": "onClose",
            "type": "() => void",
            "optional": true
          }
        ],
        "hooks": [
          "useMQTT",
          "useSsl"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/alert",
          "@/components/ui/badge",
          "@/hooks/useMQTT"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "mqtt-status",
        "path": "/Frontend/components/mqtt-status.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useMQTTStatus"
        ],
        "dependencies": [
          "@/hooks/useMQTTStatus",
          "@/components/ui/badge",
          "lucide-react"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "ip-configuration",
        "path": "/Frontend/components/network/ip-configuration.tsx",
        "description": "Important Notes",
        "props": [
          {
            "name": "isLoading",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/card",
          "@/components/ui/table",
          "@/components/ui/badge",
          "@/components/ui/dialog",
          "@/components/ui/tabs",
          "@/components/ui/select",
          "sweetalert2",
          "@/components/loading-skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "modbus-tcp",
        "path": "/Frontend/components/network/modbus-tcp.tsx",
        "description": "",
        "props": [
          {
            "name": "isLoading",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useCallback",
          "useMemo",
          "useMQTT"
        ],
        "dependencies": [
          "react",
          "@/components/ui/input",
          "@/components/ui/button",
          "@/components/ui/card",
          "lucide-react",
          "sonner",
          "sweetalert2",
          "@/hooks/useMQTT",
          "@/components/loading-skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "snmp-configuration",
        "path": "/Frontend/components/network/snmp-configuration.tsx",
        "description": "",
        "props": [
          {
            "name": "isLoading",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useEffect",
          "useState",
          "useCallback",
          "useMemo",
          "useMQTT"
        ],
        "dependencies": [
          "react",
          "sonner",
          "@/components/ui/card",
          "sweetalert2",
          "@/components/ui/input",
          "@/components/ui/button",
          "@/components/ui/label",
          "lucide-react",
          "@/hooks/useMQTT",
          "@/components/loading-skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "pin-config",
        "path": "/Frontend/components/pin-config.tsx",
        "description": "Pin Configuration",
        "props": [],
        "hooks": [
          "useState",
          "useEffect",
          "useMQTT",
          "useMQTTStatus",
          "useMQTTPublish"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/badge",
          "@/components/ui/alert",
          "sonner",
          "@/hooks/useMQTT",
          "@/hooks/useMQTTStatus",
          "@/hooks/useMQTTPublish"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "realtime-clock",
        "path": "/Frontend/components/realtime-clock.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useEffect",
          "useState"
        ],
        "dependencies": [
          "react"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "refresh-button",
        "path": "/Frontend/components/refresh-button.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "lucide-react",
          "@/components/ui/button"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "sensor-charts",
        "path": "/Frontend/components/sensor-charts.tsx",
        "description": "{title}",
        "props": [
          {
            "name": "data",
            "type": "DeviceSensorData[]",
            "optional": false
          },
          {
            "name": "title",
            "type": "string",
            "optional": true
          }
        ],
        "hooks": [
          "useMemo"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/badge",
          "@/lib/api-service"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "session-info",
        "path": "/Frontend/components/session-info.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useState",
          "useEffect",
          "useAuth",
          "user"
        ],
        "dependencies": [
          "react",
          "@/components/ui/badge",
          "@/components/ui/button",
          "@/components/ui/separator",
          "@/lib/auth-utils",
          "@/hooks/useAuth",
          "@/components/jwt-token-info",
          "@/lib/auth-utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "session-timeout-warning",
        "path": "/Frontend/components/session-timeout-warning.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useEffect",
          "useState",
          "useAuth",
          "user"
        ],
        "dependencies": [
          "react",
          "@/hooks/useAuth",
          "@/lib/auth-utils",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "system-config",
        "path": "/Frontend/components/system-config.tsx",
        "description": "System Configuration",
        "props": [],
        "hooks": [
          "useState",
          "useEffect",
          "useMQTT",
          "useMQTTStatus",
          "useMQTTPublish"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/switch",
          "@/components/ui/separator",
          "@/components/ui/badge",
          "sonner",
          "@/hooks/useMQTT",
          "@/hooks/useMQTTStatus",
          "@/hooks/useMQTTPublish"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "ApiInfo",
        "path": "/Frontend/components/tabs/ApiInfo.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "ApiScan",
        "path": "/Frontend/components/tabs/ApiScan.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "ModbusDeviceManager",
        "path": "/Frontend/components/tabs/ModbusDeviceManager.tsx",
        "description": "Modbus TCP Communication",
        "props": [],
        "hooks": [
          "useEffect",
          "useState"
        ],
        "dependencies": [
          "react",
          "@/components/ui/input",
          "@/components/ui/button",
          "@/components/ui/separator",
          "@/components/ui/sidebar",
          "lucide-react",
          "axios",
          "@/lib/mqttClient"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "SnmpDeviceManager",
        "path": "/Frontend/components/tabs/SnmpDeviceManager.tsx",
        "description": "SNMP Communication",
        "props": [],
        "hooks": [
          "useEffect",
          "useForm",
          "useMQTTStatus"
        ],
        "dependencies": [
          "react",
          "react-hook-form",
          "zod",
          "@hookform/resolvers/zod",
          "@/lib/mqttClient",
          "@/hooks/useMQTTStatus",
          "@/components/ui/input",
          "@/components/ui/button",
          "@/components/ui/card",
          "@/components/ui/separator",
          "lucide-react",
          "@/components/ui/sidebar"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "theme-avatar",
        "path": "/Frontend/components/theme-avatar.tsx",
        "description": "Theme-aware Avatar component that automatically switches between light and dark default avatars based on current theme",
        "props": [
          {
            "name": "user",
            "type": "{ photoPath?: string | null",
            "optional": true
          }
        ],
        "hooks": [
          "useTheme",
          "useEffect",
          "useState",
          "user",
          "useThemeAvatar"
        ],
        "dependencies": [
          "next-themes",
          "react",
          "next/image",
          "@/lib/avatar-utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "theme-provider",
        "path": "/Frontend/components/theme-provider.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react"
        ],
        "isClientComponent": true,
        "isServerComponent": false
      },
      {
        "name": "accordion",
        "path": "/Frontend/components/ui/accordion.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-accordion",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "alert-dialog",
        "path": "/Frontend/components/ui/alert-dialog.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-alert-dialog",
          "@/lib/utils",
          "@/components/ui/button"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "alert",
        "path": "/Frontend/components/ui/alert.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "class-variance-authority",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "aspect-ratio",
        "path": "/Frontend/components/ui/aspect-ratio.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "@radix-ui/react-aspect-ratio"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "avatar",
        "path": "/Frontend/components/ui/avatar.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-avatar",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "badge",
        "path": "/Frontend/components/ui/badge.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "class-variance-authority",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "breadcrumb",
        "path": "/Frontend/components/ui/breadcrumb.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-slot",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "button",
        "path": "/Frontend/components/ui/button.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-slot",
          "class-variance-authority",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "calendar",
        "path": "/Frontend/components/ui/calendar.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "lucide-react",
          "react-day-picker",
          "@/lib/utils",
          "@/components/ui/button"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "card",
        "path": "/Frontend/components/ui/card.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "carousel",
        "path": "/Frontend/components/ui/carousel.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useEmblaCarousel",
          "uselType",
          "usel",
          "uselApi",
          "uselParameters",
          "uselOptions",
          "uselPlugin",
          "uselProps",
          "uselContextProps",
          "uselRef",
          "uselContext",
          "useCarousel",
          "useContext",
          "used",
          "useState",
          "useCallback",
          "useEffect",
          "uselContent",
          "uselItem",
          "uselPrevious",
          "uselNext"
        ],
        "dependencies": [
          "react",
          "lucide-react",
          "@/lib/utils",
          "@/components/ui/button"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "chart",
        "path": "/Frontend/components/ui/chart.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useChart",
          "useContext",
          "used",
          "useId",
          "useMemo"
        ],
        "dependencies": [
          "react",
          "recharts",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "checkbox",
        "path": "/Frontend/components/ui/checkbox.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-checkbox",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "collapsible",
        "path": "/Frontend/components/ui/collapsible.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "@radix-ui/react-collapsible"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "command",
        "path": "/Frontend/components/ui/command.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-dialog",
          "cmdk",
          "lucide-react",
          "@/lib/utils",
          "@/components/ui/dialog"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "context-menu",
        "path": "/Frontend/components/ui/context-menu.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-context-menu",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dialog",
        "path": "/Frontend/components/ui/dialog.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-dialog",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "drawer",
        "path": "/Frontend/components/ui/drawer.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "vaul",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "dropdown-menu",
        "path": "/Frontend/components/ui/dropdown-menu.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-dropdown-menu",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "form",
        "path": "/Frontend/components/ui/form.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useFormContext",
          "useFormField",
          "useContext",
          "used",
          "useId"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-label",
          "@radix-ui/react-slot",
          "@/lib/utils",
          "@/components/ui/label"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "hover-card",
        "path": "/Frontend/components/ui/hover-card.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-hover-card",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "input-otp",
        "path": "/Frontend/components/ui/input-otp.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useContext"
        ],
        "dependencies": [
          "react",
          "input-otp",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "input",
        "path": "/Frontend/components/ui/input.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "label",
        "path": "/Frontend/components/ui/label.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-label",
          "class-variance-authority",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "menubar",
        "path": "/Frontend/components/ui/menubar.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-menubar",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "navigation-menu",
        "path": "/Frontend/components/ui/navigation-menu.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-navigation-menu",
          "class-variance-authority",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "pagination",
        "path": "/Frontend/components/ui/pagination.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "lucide-react",
          "@/lib/utils",
          "@/components/ui/button"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "popover",
        "path": "/Frontend/components/ui/popover.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-popover",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "progress",
        "path": "/Frontend/components/ui/progress.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-progress",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "radio-group",
        "path": "/Frontend/components/ui/radio-group.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-radio-group",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "resizable",
        "path": "/Frontend/components/ui/resizable.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "lucide-react",
          "react-resizable-panels",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "scroll-area",
        "path": "/Frontend/components/ui/scroll-area.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-scroll-area",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "select",
        "path": "/Frontend/components/ui/select.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-select",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "separator",
        "path": "/Frontend/components/ui/separator.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-separator",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "sheet",
        "path": "/Frontend/components/ui/sheet.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-dialog",
          "class-variance-authority",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "sidebar",
        "path": "/Frontend/components/ui/sidebar.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useIsMobile",
          "useSidebar",
          "useContext",
          "used",
          "useState",
          "useCallback",
          "useEffect",
          "useMemo"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-slot",
          "class-variance-authority",
          "lucide-react",
          "@/hooks/use-mobile",
          "@/lib/utils",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/separator",
          "@/components/ui/sheet",
          "@/components/ui/skeleton"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "skeleton",
        "path": "/Frontend/components/ui/skeleton.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "slider",
        "path": "/Frontend/components/ui/slider.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-slider",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "sonner",
        "path": "/Frontend/components/ui/sonner.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useTheme"
        ],
        "dependencies": [
          "next-themes",
          "sonner"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "switch",
        "path": "/Frontend/components/ui/switch.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-switch",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "table",
        "path": "/Frontend/components/ui/table.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "tabs",
        "path": "/Frontend/components/ui/tabs.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-tabs",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "textarea",
        "path": "/Frontend/components/ui/textarea.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "toast",
        "path": "/Frontend/components/ui/toast.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-toast",
          "class-variance-authority",
          "lucide-react",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "toaster",
        "path": "/Frontend/components/ui/toaster.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useToast"
        ],
        "dependencies": [
          "@/hooks/use-toast"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "toggle-group",
        "path": "/Frontend/components/ui/toggle-group.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useContext"
        ],
        "dependencies": [
          "react",
          "@radix-ui/react-toggle-group",
          "class-variance-authority",
          "@/lib/utils",
          "@/components/ui/toggle"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "toggle",
        "path": "/Frontend/components/ui/toggle.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-toggle",
          "class-variance-authority",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "tooltip",
        "path": "/Frontend/components/ui/tooltip.tsx",
        "description": "",
        "props": [],
        "hooks": [],
        "dependencies": [
          "react",
          "@radix-ui/react-tooltip",
          "@/lib/utils"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "use-mobile",
        "path": "/Frontend/components/ui/use-mobile.tsx",
        "description": "",
        "props": [],
        "hooks": [
          "useIsMobile",
          "useState",
          "useEffect"
        ],
        "dependencies": [
          "react"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "user-activity-widget",
        "path": "/Frontend/components/user-activity-widget.tsx",
        "description": "",
        "props": [
          {
            "name": "compact",
            "type": "boolean",
            "optional": true
          }
        ],
        "hooks": [
          "useState",
          "useEffect",
          "username",
          "userActivities",
          "userActivityApi",
          "user"
        ],
        "dependencies": [
          "react",
          "@/components/ui/card",
          "@/components/ui/button",
          "@/components/ui/badge"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "device-form",
        "path": "/Frontend/components/zkteco/device-form.tsx",
        "description": "Basic Information",
        "props": [
          {
            "name": "device",
            "type": "ZKTecoDevice",
            "optional": true
          },
          {
            "name": "onSubmit",
            "type": "(data: DeviceFormData) => Promise<boolean>",
            "optional": false
          },
          {
            "name": "onCancel",
            "type": "() => void",
            "optional": false
          },
          {
            "name": "loading",
            "type": "boolean",
            "optional": true
          },
          {
            "name": "error",
            "type": "string | null",
            "optional": true
          }
        ],
        "hooks": [
          "useForm"
        ],
        "dependencies": [
          "react",
          "react-hook-form",
          "@hookform/resolvers/zod",
          "zod",
          "@/components/ui/button",
          "@/components/ui/input",
          "@/components/ui/label",
          "@/components/ui/switch",
          "@/components/ui/card",
          "@/components/ui/alert",
          "lucide-react",
          "@/types/zkteco"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      },
      {
        "name": "device-list",
        "path": "/Frontend/components/zkteco/device-list.tsx",
        "description": "No devices configured",
        "props": [
          {
            "name": "devices",
            "type": "ZKTecoDevice[]",
            "optional": false
          },
          {
            "name": "testResults",
            "type": "DeviceConnectionTest[]",
            "optional": false
          },
          {
            "name": "loading",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "testLoading",
            "type": "boolean",
            "optional": false
          },
          {
            "name": "error",
            "type": "string | null",
            "optional": false
          },
          {
            "name": "onAddDevice",
            "type": "() => void",
            "optional": false
          },
          {
            "name": "onEditDevice",
            "type": "(device: ZKTecoDevice) => void",
            "optional": false
          },
          {
            "name": "onDeleteDevice",
            "type": "(deviceId: string) => Promise<boolean>",
            "optional": false
          },
          {
            "name": "onTestDevice",
            "type": "(deviceId: string) => Promise<void>",
            "optional": false
          },
          {
            "name": "onTestAllDevices",
            "type": "() => Promise<void>",
            "optional": false
          },
          {
            "name": "onRefresh",
            "type": "() => Promise<void>",
            "optional": false
          }
        ],
        "hooks": [
          "useState",
          "user_count"
        ],
        "dependencies": [
          "react",
          "@/components/ui/button",
          "@/components/ui/badge",
          "@/components/ui/card",
          "@/components/ui/alert",
          "@/types/zkteco"
        ],
        "isClientComponent": false,
        "isServerComponent": true
      }
    ],
    "hooks": [
      {
        "name": "use-sort-table",
        "path": "/Frontend/hooks/use-sort-table.ts",
        "description": "hooks/use-sort-table.tsx",
        "parameters": [],
        "returnType": "safeData",
        "dependencies": [
          "useState",
          "useMemo",
          "useSortableTable"
        ]
      },
      {
        "name": "use-toast",
        "path": "/Frontend/hooks/use-toast.ts",
        "description": "Inspired by react-hot-toast library",
        "parameters": [],
        "returnType": "count",
        "dependencies": [
          "useToast",
          "useState",
          "useEffect"
        ]
      },
      {
        "name": "useApiCache",
        "path": "/Frontend/hooks/useApiCache.ts",
        "description": "Cache duration in milliseconds (default: 5 minutes)",
        "parameters": [],
        "returnType": "null",
        "dependencies": [
          "useState",
          "useCallback",
          "useRef",
          "useApiCache"
        ]
      },
      {
        "name": "useBackendStatus",
        "path": "/Frontend/hooks/useBackendStatus.ts",
        "description": "in milliseconds",
        "parameters": [],
        "returnType": "{\r\n        isOnline: true,\r\n        lastChecked: new Date(),\r\n        responseTime,\r\n        error: null\r\n      }",
        "dependencies": [
          "useState",
          "useEffect",
          "useCallback",
          "useBackendStatus"
        ]
      },
      {
        "name": "useDashboardPreferences",
        "path": "/Frontend/hooks/useDashboardPreferences.ts",
        "description": "Load preferences from localStorage on mount",
        "parameters": [],
        "returnType": "{\r\n    preferences,\r\n    isLoaded,\r\n    updatePreferences,\r\n    resetPreferences,\r\n    toggleCarouselMode,\r\n    toggleAutoPlay,\r\n    setAutoPlayInterval,\r\n    addFavoriteComponent,\r\n    removeFavoriteComponent,\r\n    setLastViewedComponent\r\n  }",
        "dependencies": [
          "useState",
          "useEffect",
          "useCallback",
          "uselMode",
          "useDashboardPreferences"
        ]
      },
      {
        "name": "useDeviceStatus",
        "path": "/Frontend/hooks/useDeviceStatus.ts",
        "description": "Refresh data after check",
        "parameters": [
          "refreshInterval: number = 30000"
        ],
        "returnType": "response",
        "dependencies": [
          "useState",
          "useEffect",
          "useCallback",
          "useDeviceStatus",
          "uses"
        ]
      },
      {
        "name": "useDynamicMenu",
        "path": "/Frontend/hooks/useDynamicMenu.ts",
        "description": "hooks/useDynamicMenu.ts",
        "parameters": [],
        "returnType": "{\r\n    menuData,\r\n    isLoading,\r\n    error,\r\n    refreshMenu,\r\n    lastUpdate,\r\n  }",
        "dependencies": [
          "useDynamicMenu",
          "useState",
          "useEffect",
          "useDeveloperMode",
          "useMenuManagement"
        ]
      },
      {
        "name": "useDynamicNavigation",
        "path": "/Frontend/hooks/useDynamicNavigation.ts",
        "description": "hooks/useDynamicNavigation.ts",
        "parameters": [],
        "returnType": "navigationData",
        "dependencies": [
          "useDynamicNavigation",
          "useState",
          "useEffect",
          "userRole",
          "userPermissions"
        ]
      },
      {
        "name": "useMQTT",
        "path": "/Frontend/hooks/useMQTT.ts",
        "description": "MQTT Hook for React components",
        "parameters": [],
        "returnType": "success",
        "dependencies": [
          "useState",
          "useEffect",
          "useCallback",
          "useRef",
          "useMQTT"
        ]
      },
      {
        "name": "useMQTTConnection",
        "path": "/Frontend/hooks/useMQTTConnection.ts",
        "description": "hooks/useMQTTConnection.ts",
        "parameters": [],
        "returnType": "{\n    isInitializing,\n    connectionAttempted,\n    isConnected,\n    isConnecting\n  }",
        "dependencies": [
          "useMQTTConnection",
          "useEffect",
          "useState",
          "useMQTT"
        ]
      },
      {
        "name": "useMQTTPublish",
        "path": "/Frontend/hooks/useMQTTPublish.ts",
        "description": "hooks/useMQTTPublish.ts",
        "parameters": [],
        "returnType": "false",
        "dependencies": [
          "useMQTTPublish",
          "useCallback",
          "useMQTT"
        ]
      },
      {
        "name": "useMQTTStatus",
        "path": "/Frontend/hooks/useMQTTStatus.ts",
        "description": "hooks/useMQTTStatus.ts",
        "parameters": [],
        "returnType": "status",
        "dependencies": [
          "useMQTTStatus",
          "useState",
          "useEffect",
          "useMQTT"
        ]
      },
      {
        "name": "usePinConfig",
        "path": "/Frontend/hooks/usePinConfig.ts",
        "description": "Types for pin configuration",
        "parameters": [],
        "returnType": "errors",
        "dependencies": [
          "useCallback",
          "useEffect",
          "useState",
          "useMQTT",
          "useMQTTPublish",
          "usePinConfig"
        ]
      },
      {
        "name": "useRoutePreloader",
        "path": "/Frontend/hooks/useRoutePreloader.ts",
        "description": "Silently ignore errors",
        "parameters": [
          "{ routes",
          "preloadDelay = 3000 }: RoutePreloaderOptions"
        ],
        "returnType": "unknown",
        "dependencies": [
          "useEffect",
          "useRouter",
          "useRoutePreloader"
        ]
      },
      {
        "name": "useSystemConfig",
        "path": "/Frontend/hooks/useSystemConfig.ts",
        "description": "Types for system configuration",
        "parameters": [],
        "returnType": "false",
        "dependencies": [
          "useCallback",
          "useEffect",
          "useState",
          "useMQTT",
          "useMQTTPublish",
          "useSystemConfig"
        ]
      },
      {
        "name": "useZKTecoDevices",
        "path": "/Frontend/hooks/useZKTecoDevices.ts",
        "description": "State management",
        "parameters": [],
        "returnType": "new",
        "dependencies": [
          "useState",
          "useCallback",
          "useRef",
          "useEffect",
          "useMQTT",
          "useZKTecoDevices"
        ]
      },
      {
        "name": "use-mobile",
        "path": "/Frontend/hooks/use-mobile.tsx",
        "description": "",
        "parameters": [],
        "returnType": "unknown",
        "dependencies": [
          "useIsMobile",
          "useState",
          "useEffect"
        ]
      },
      {
        "name": "use-search-filter",
        "path": "/Frontend/hooks/use-search-filter.tsx",
        "description": "",
        "parameters": [],
        "returnType": "String",
        "dependencies": [
          "useMemo",
          "useState",
          "useSearchFilter"
        ]
      },
      {
        "name": "use-sort-table",
        "path": "/Frontend/hooks/use-sort-table.tsx",
        "description": "hooks/use-sort-table.ts",
        "parameters": [],
        "returnType": "path",
        "dependencies": [
          "useState",
          "useSortableTable"
        ]
      },
      {
        "name": "useAuth",
        "path": "/Frontend/hooks/useAuth.tsx",
        "description": "hooks/useAuth.tsx",
        "parameters": [],
        "returnType": "true",
        "dependencies": [
          "useAuth",
          "useContext",
          "useEffect",
          "useState",
          "useCallback",
          "useRouter",
          "user",
          "used"
        ]
      },
      {
        "name": "useAuthGuard",
        "path": "/Frontend/hooks/useAuthGuard.tsx",
        "description": "hooks/useAuthGuard.tsx",
        "parameters": [
          "options: UseAuthGuardOptions = {}"
        ],
        "returnType": "{\r\n    isAuthorized,\r\n    isLoading,\r\n    user\r\n  }",
        "dependencies": [
          "useAuthGuard",
          "useEffect",
          "useState",
          "useRouter",
          "useAuth",
          "user"
        ]
      }
    ],
    "contexts": [
      {
        "name": "DeveloperModeContext",
        "path": "/Frontend/contexts/DeveloperModeContext.tsx",
        "description": "5 minutes in milliseconds",
        "state": "",
        "actions": [],
        "provider": "DeveloperModeProvider"
      }
    ]
  },
  "features": [
    {
      "name": "Frontend",
      "description": "Frontend functionality",
      "pages": [
        {
          "name": "page",
          "path": "/Frontend/app/access-control/device/page.tsx",
          "url": "/access-control/device",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Breadcrumb",
            "BreadcrumbItem",
            "BreadcrumbLink",
            "BreadcrumbList",
            "BreadcrumbPage",
            "BreadcrumbSeparator",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Alert",
            "AlertDescription",
            "Badge",
            "DeviceList",
            "DeviceForm"
          ],
          "hooks": [
            "useState",
            "useAuthGuard",
            "useMQTT",
            "useZKTecoDevices"
          ],
          "requiresAuth": true,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/access-control/devices/page.tsx",
          "url": "/access-control/devices",
          "description": "Access Control Devices",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Badge",
            "Table",
            "TableBody",
            "TableCell",
            "TableHead",
            "TableHeader",
            "TableRow",
            "DeveloperModeGuard"
          ],
          "hooks": [
            "useState",
            "useEffect"
          ],
          "requiresAuth": false,
          "developerMode": true
        },
        {
          "name": "page",
          "path": "/Frontend/app/access-control/monitoring/page.tsx",
          "url": "/access-control/monitoring",
          "description": "Access Control Monitoring",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Badge",
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "DeveloperModeGuard"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "users",
            "userId",
            "user",
            "user_id"
          ],
          "requiresAuth": false,
          "developerMode": true
        },
        {
          "name": "page",
          "path": "/Frontend/app/access-control/page.tsx",
          "url": "/access-control",
          "description": "Device Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Button",
            "Badge",
            "DeveloperModeGuard"
          ],
          "hooks": [
            "useAuthGuard",
            "useMQTT",
            "useZKTecoDevices",
            "users",
            "user"
          ],
          "requiresAuth": true,
          "developerMode": true
        },
        {
          "name": "page",
          "path": "/Frontend/app/access-control/users/page.tsx",
          "url": "/access-control/users",
          "description": "Access Control Users",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Input",
            "Label",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Badge",
            "Dialog",
            "DialogContent",
            "DialogHeader",
            "DialogTitle",
            "DialogTrigger",
            "AlertDialog",
            "AlertDialogAction",
            "AlertDialogCancel",
            "AlertDialogContent",
            "AlertDialogDescription",
            "AlertDialogFooter",
            "AlertDialogHeader",
            "AlertDialogTitle",
            "AlertDialogTrigger",
            "Table",
            "TableBody",
            "TableCell",
            "TableHead",
            "TableHeader",
            "TableRow",
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "DeveloperModeGuard"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "users",
            "user_data",
            "user_id",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": true
        },
        {
          "name": "page",
          "path": "/Frontend/app/auth/forgot-password/page.tsx",
          "url": "/auth/forgot-password",
          "description": "Verification Successful",
          "components": [
            "Input",
            "Button",
            "Label",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle"
          ],
          "hooks": [
            "useState",
            "useRouter",
            "userId"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/auth/login/page.tsx",
          "url": "/auth/login",
          "description": "",
          "components": [
            "Input",
            "Button",
            "Label",
            "ThemeAvatar"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useRouter",
            "useTheme",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/auth/register/page.tsx",
          "url": "/auth/register",
          "description": "",
          "components": [
            "Input",
            "Button",
            "Label"
          ],
          "hooks": [
            "useState",
            "useRouter",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/control/containment/page.tsx",
          "url": "/control/containment",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Switch",
            "Label",
            "Badge",
            "MQTTTroubleshootingGuide",
            "MQTTConnectionBadge",
            "UserActivityWidget"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useMQTTPublish",
            "useMQTTStatus",
            "useMQTTConnection",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/dashboard/page.tsx",
          "url": "/dashboard",
          "description": "{appName}",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "RealtimeClock",
            "Refresh",
            "DashboardCarousel",
            "DashboardSettingsShortcut"
          ],
          "hooks": [
            "usel",
            "useIsMobile"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/dashboard-overview/page.tsx",
          "url": "/dashboard-overview",
          "description": "IOT Containment Monitoring",
          "components": [
            "Separator",
            "SidebarInset",
            "SidebarTrigger"
          ],
          "hooks": [
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/developer/page.tsx",
          "url": "/developer",
          "description": "Developer Mode",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Badge",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Alert",
            "AlertDescription",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "DeveloperModeDialog",
            "DeveloperModeGuard"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useDeveloperMode"
          ],
          "requiresAuth": false,
          "developerMode": true
        },
        {
          "name": "page",
          "path": "/Frontend/app/info/page.tsx",
          "url": "/info",
          "description": "System Information",
          "components": [
            "Button",
            "Separator",
            "SidebarInset",
            "SidebarTrigger",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "SessionInfo",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Badge",
            "Progress"
          ],
          "hooks": [
            "useBackendStatus",
            "useEffect",
            "useState"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/camera/page.tsx",
          "url": "/management/camera",
          "description": "CCTV Camera Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Badge",
            "Button",
            "Input",
            "Label"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useRef",
            "useRouter",
            "useSortableTable"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/containments/page.tsx",
          "url": "/management/containments",
          "description": "Containment Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "Textarea",
            "Switch"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useSortableTable",
            "useSearchFilter",
            "useRouter",
            "usePermissions"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/devices/page.tsx",
          "url": "/management/devices",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "Textarea",
            "DeviceStatusBadge"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useSearchParams",
            "useRouter",
            "useSortableTable",
            "useSearchFilter",
            "useDeviceStatus",
            "usePermissions",
            "uses"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/devices/rack/page.tsx",
          "url": "/management/devices/rack",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "Textarea"
          ],
          "hooks": [
            "useSearchParams",
            "useRouter",
            "useEffect",
            "useState",
            "useSortableTable",
            "useSearchFilter",
            "usePermissions"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/maintenance/page.tsx",
          "url": "/management/maintenance",
          "description": "Maintenance Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Input",
            "Label",
            "Textarea",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Table",
            "TableBody",
            "TableCell",
            "TableHead",
            "TableHeader",
            "TableRow",
            "Badge",
            "Dialog",
            "DialogContent",
            "DialogDescription",
            "DialogFooter",
            "DialogHeader",
            "DialogTitle",
            "DialogTrigger",
            "AlertDialog",
            "AlertDialogAction",
            "AlertDialogCancel",
            "AlertDialogContent",
            "AlertDialogDescription",
            "AlertDialogFooter",
            "AlertDialogHeader",
            "AlertDialogTitle",
            "AlertDialogTrigger",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Calendar",
            "Popover",
            "PopoverContent",
            "PopoverTrigger"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "usePermissions",
            "usersApi",
            "users",
            "user",
            "usersRes"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/menu/page.tsx",
          "url": "/management/menu",
          "description": "Menu Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Badge",
            "Input",
            "Label",
            "Switch",
            "Alert",
            "AlertDescription",
            "IconSelector"
          ],
          "hooks": [
            "useState",
            "useMenuManagement",
            "useDynamicMenu",
            "usePermissions",
            "users"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/racks/page.tsx",
          "url": "/management/racks",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "Textarea",
            "Switch"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useSearchParams",
            "useRouter",
            "useSortableTable",
            "useSearchFilter",
            "usePermissions"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/sensors/page.tsx",
          "url": "/management/sensors",
          "description": "",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "SensorDashboard"
          ],
          "hooks": [],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/user-activity/page.tsx",
          "url": "/management/user-activity",
          "description": "User Activity Monitor",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "UserActivityWidget"
          ],
          "hooks": [
            "user",
            "users"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/users/page.tsx",
          "url": "/management/users",
          "description": "User Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "ThemeAvatar"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "usersApi",
            "userPhotoApi",
            "useSortableTable",
            "useSearchFilter",
            "usePermissions",
            "users",
            "user",
            "userId",
            "userManagement"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/management/whatsapp/page.tsx",
          "url": "/management/whatsapp",
          "description": "WhatsApp Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Badge",
            "Button",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Label",
            "Textarea",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger"
          ],
          "hooks": [
            "useState",
            "useEffect"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/monitoring/sensors/page.tsx",
          "url": "/monitoring/sensors",
          "description": "",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Badge",
            "Button",
            "SidebarInset",
            "SidebarTrigger",
            "Separator"
          ],
          "hooks": [
            "useEffect",
            "useState"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/mqtt/page.tsx",
          "url": "/mqtt",
          "description": "Test Failed",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Input",
            "Label",
            "Textarea",
            "Switch",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Badge",
            "badgeVariants",
            "PageSkeleton"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useCallback",
            "uses",
            "useEnvironmentConfig",
            "username",
            "useSsl",
            "user",
            "useEnter"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/ip-address/page.tsx",
          "url": "/network/ip-address",
          "description": "Delete Configuration?",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Input",
            "Label",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Table",
            "TableBody",
            "TableCell",
            "TableHead",
            "TableHeader",
            "TableRow",
            "Badge",
            "Dialog",
            "DialogContent",
            "DialogDescription",
            "DialogFooter",
            "DialogHeader",
            "DialogTitle",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Textarea",
            "Alert",
            "AlertDescription"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "uses"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/ip-scanner/page.tsx",
          "url": "/network/ip-scanner",
          "description": "Network Scanner",
          "components": [
            "Button",
            "Progress",
            "SidebarInset",
            "SidebarTrigger",
            "Separator"
          ],
          "hooks": [
            "useState"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/page.tsx",
          "url": "/network",
          "description": "WiFi Management",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Badge"
          ],
          "hooks": [],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/protocol/modbus/page.tsx",
          "url": "/network/protocol/modbus",
          "description": "Are you sure?",
          "components": [
            "Input",
            "Button",
            "Separator",
            "SidebarInset",
            "SidebarTrigger",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "MqttStatus"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useCallback",
            "useRef",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/protocol/snmp/page.tsx",
          "url": "/network/protocol/snmp",
          "description": "Are you sure?",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Input",
            "Button",
            "Label",
            "Separator",
            "SidebarInset",
            "SidebarTrigger",
            "MqttStatus"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useCallback",
            "useRef",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/network/wifi/page.tsx",
          "url": "/network/wifi",
          "description": "Wi‑Fi Scanner",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Tabs",
            "TabsList",
            "TabsTrigger",
            "TabsContent",
            "Card",
            "CardHeader",
            "CardContent",
            "CardTitle",
            "Button",
            "Input",
            "MqttStatus"
          ],
          "hooks": [
            "useEffect",
            "useRef",
            "useState"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/page.tsx",
          "url": "/",
          "description": "",
          "components": [],
          "hooks": [
            "useEffect",
            "useRouter"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/reports/access-log/page.tsx",
          "url": "/reports/access-log",
          "description": "Access Log Reports",
          "components": [
            "Button",
            "Badge",
            "Input",
            "Label",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useMemo",
            "useSortableTable",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/reports/emergency/page.tsx",
          "url": "/reports/emergency",
          "description": "Emergency Reports",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Badge",
            "Switch",
            "Input",
            "Label"
          ],
          "hooks": [
            "useState",
            "useEffect"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/reports/maintenance/page.tsx",
          "url": "/reports/maintenance",
          "description": "Maintenance Reports",
          "components": [
            "SidebarInset",
            "SidebarTrigger",
            "Separator",
            "Button",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Card",
            "CardContent",
            "CardDescription",
            "CardHeader",
            "CardTitle",
            "Table",
            "TableBody",
            "TableCell",
            "TableHead",
            "TableHeader",
            "TableRow",
            "Badge",
            "Calendar",
            "Popover",
            "PopoverContent",
            "PopoverTrigger"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "usersApi",
            "userId",
            "userName",
            "users",
            "usersRes",
            "userStats",
            "user"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/reports/sensor-data/page.tsx",
          "url": "/reports/sensor-data",
          "description": "Sensor Data Reports",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Input",
            "Label",
            "Badge",
            "Tabs",
            "TabsContent",
            "TabsList",
            "TabsTrigger"
          ],
          "hooks": [
            "useState",
            "useEffect"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/settings/setting/page.tsx",
          "url": "/settings/setting",
          "description": "General Settings",
          "components": [
            "Card",
            "CardHeader",
            "CardTitle",
            "CardContent",
            "Button",
            "Badge",
            "Separator",
            "SidebarInset",
            "SidebarTrigger",
            "Switch",
            "Label",
            "Select",
            "SelectContent",
            "SelectItem",
            "SelectTrigger",
            "SelectValue",
            "Tabs",
            "TabsList",
            "TabsTrigger",
            "TabsContent",
            "SystemConfigComponent",
            "PinConfigComponent"
          ],
          "hooks": [
            "useEffect",
            "useState",
            "useRef",
            "useCallback",
            "useSearchParams",
            "useTheme",
            "useDashboardPreferences",
            "useMQTT",
            "uselMode",
            "used_memory",
            "used_disk",
            "usel"
          ],
          "requiresAuth": false,
          "developerMode": false
        },
        {
          "name": "page",
          "path": "/Frontend/app/test/page.tsx",
          "url": "/test",
          "description": "",
          "components": [
            "Card",
            "CardContent",
            "CardHeader",
            "CardTitle",
            "Button",
            "Input",
            "Separator"
          ],
          "hooks": [
            "useState",
            "useEffect",
            "useMemo"
          ],
          "requiresAuth": false,
          "developerMode": false
        }
      ],
      "controllers": [],
      "models": []
    }
  ],
  "apiEndpoints": [
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<AccessLog>>> GetAccessLogs(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> GetAccessLog(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> CreateAccessLog([FromBody] AccessLog accessLog)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "software",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<AccessLog>>> LogSoftwareAccess([FromBody] SoftwareAccessRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "via/{via}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<AccessLog>>>> GetAccessLogsByVia(AccessMethod via)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "summary",
      "description": "",
      "signature": "public async Task<ActionResult<object>> GetAccessLogSummary(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReports()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-date-range",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByDateRange(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-status/{status}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByStatus(string status)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-trigger/{trigger}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ActivityReport>>> GetActivityReportsByTrigger(string trigger)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "count",
      "description": "",
      "signature": "public async Task<ActionResult<int>> GetTotalCount()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<ActivityReport>> GetActivityReport(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<ActivityReport>> CreateActivityReport(CreateActivityReportRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteActivityReport(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "all",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteAllActivityReports()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "login",
      "description": "",
      "signature": "public async Task<ActionResult<LoginResponse>> Login(LoginRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "register",
      "description": "",
      "signature": "public async Task<ActionResult<LoginResponse>> Register(RegisterRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "logout",
      "description": "",
      "signature": "public IActionResult Logout()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "me",
      "description": "",
      "signature": "public IActionResult GetCurrentUser()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "verify-reset-credentials",
      "description": "",
      "signature": "public async Task<ActionResult<VerifyResetCredentialsResponse>> VerifyResetCredentials(VerifyResetCredentialsRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "reset-password",
      "description": "",
      "signature": "public async Task<ActionResult<ResetPasswordResponse>> ResetPassword(ResetPasswordRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "create",
      "description": "",
      "signature": "public async Task<IActionResult> CreateBackup()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "available",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<string>>> GetAvailableBackups()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "last-backup-date",
      "description": "",
      "signature": "public async Task<ActionResult<DateTime?>> GetLastBackupDate()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "is-backup-due",
      "description": "",
      "signature": "public async Task<ActionResult<bool>> IsBackupDue()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "cleanup",
      "description": "",
      "signature": "public async Task<IActionResult> CleanupOldBackups([FromQuery] int keepLastN = 4)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "directory",
      "description": "",
      "signature": "public async Task<ActionResult<string>> GetBackupDirectory()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<CameraConfig>>> GetCameraConfigs()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<CameraConfig>> GetCameraConfig(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<CameraConfig>> CreateCameraConfig(CreateCameraConfigRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateCameraConfig(int id, UpdateCameraConfigRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteCameraConfig(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "toggle",
      "description": "",
      "signature": "public async Task<ActionResult<ContainmentControlResponse>> SendToggleCommand(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{containmentId}/history",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ContainmentControl>>> GetControlHistory(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "history",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ContainmentControl>>> GetAllControlHistory(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "controls",
      "description": "",
      "signature": "public async Task<ActionResult<object>> TestMqttControl()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test",
      "description": "",
      "signature": "public async Task<ActionResult<object>> TestMqttControl()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Containment>>> GetContainments()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<Containment>> GetContainment(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<Containment>> CreateContainment(CreateContainmentRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateContainment(int id, UpdateContainmentRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteContainment(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{containmentId}",
      "description": "",
      "signature": "public async Task<ActionResult<ContainmentStatus>> GetStatus(int containmentId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<ContainmentStatus>>> GetAllStatuses()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "{containmentId}/initialize",
      "description": "",
      "signature": "public async Task<ActionResult<ContainmentStatus>> InitializeStatus(int containmentId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "{containmentId}/process",
      "description": "",
      "signature": "public async Task<ActionResult<ContainmentStatus>> ProcessMqttPayload(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device-references/{deviceId}",
      "description": "",
      "signature": "public async Task<IActionResult> GetDeviceReferences(int deviceId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "all",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<List<DeviceActivityInfo>>>> GetAllDevicesActivity()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<DeviceActivityInfo>>> GetDeviceActivity(int deviceId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}/active",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<bool>>> IsDeviceActive(int deviceId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "update-all",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<string>>> UpdateAllDevicesActivity()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "device/{deviceId}/update",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<string>>> UpdateSingleDeviceActivity(int deviceId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "statistics",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<object>>> GetDeviceActivityStatistics()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Device>>> GetDevices()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-rack/{rackId}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Device>>> GetDevicesByRack(int rackId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<Device>> GetDevice(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<Device>> CreateDevice(CreateDeviceRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateDevice(int id, UpdateDeviceRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteDevice(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<DeviceActivityStatus>>> GetDevicesStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}/status",
      "description": "",
      "signature": "public async Task<ActionResult<DeviceActivityStatus>> GetDeviceStatus(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}/online",
      "description": "",
      "signature": "public async Task<ActionResult<bool>> IsDeviceOnline(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "status/check",
      "description": "",
      "signature": "public async Task<ActionResult> ForceStatusCheck()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "status/initialize",
      "description": "",
      "signature": "public async Task<ActionResult> InitializeMonitoring()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<DeviceSensorData>>> GetSensorData(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "latest",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetLatestSensorData(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByDevice(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}/latest",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<DeviceSensorData>>> GetLatestSensorDataByDevice(int deviceId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "rack/{rackId}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByRack(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "containment/{containmentId}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<DeviceSensorData>>>> GetSensorDataByContainment(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}/statistics",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<object>>> GetSensorStatistics(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}/data-history/{dataKey}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<object>>>> GetDataHistory(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "topics",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<string>>>> GetActiveTopics()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "containment/{containmentId}/topics",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<string>>>> GetTopicsByContainment(int containmentId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "device/{deviceId}/aggregated/{dataKey}",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<IEnumerable<object>>>> GetAggregatedData(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "sensor-types",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<string>>> GetAvailableSensorTypes()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "summary",
      "description": "",
      "signature": "public async Task<ActionResult<object>> GetSensorDataSummary(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "device/{deviceId}/parse",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<DeviceSensorData>>> ParseAndStoreSensorData(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<EmergencyReport>>> GetEmergencyReports(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "summary",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<EmergencyReportSummary>>> GetEmergencyReportSummary(",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "active",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<EmergencyReport>>> GetActiveEmergencies()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "active/{emergencyType}",
      "description": "",
      "signature": "public async Task<ActionResult<EmergencyReport>> GetActiveEmergency(string emergencyType)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "close/{emergencyType}",
      "description": "",
      "signature": "public async Task<ActionResult> CloseActiveEmergency(string emergencyType)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public async Task<ActionResult<object>> GetEmergencyStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "ping",
      "description": "",
      "signature": "",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "scan",
      "description": "",
      "signature": "public async Task<IActionResult> ScanNetwork()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenances()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-target/{targetType}/{targetId}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesByTarget(MaintenanceTarget targetType, int targetId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-assignee/{userId}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesByAssignee(int userId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "my-tasks",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMyMaintenanceTasks()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "calendar",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Maintenance>>> GetMaintenancesForCalendar()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<Maintenance>> GetMaintenance(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<Maintenance>> CreateMaintenance(CreateMaintenanceRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateMaintenance(int id, UpdateMaintenanceRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PATCH",
      "path": "{id}/status",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateMaintenanceStatus(int id, UpdateMaintenanceStatusRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteMaintenance(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "user-menu",
      "description": "",
      "signature": "public async Task<IActionResult> GetUserMenu()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "roles",
      "description": "",
      "signature": "public async Task<IActionResult> GetRoles()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "roles",
      "description": "",
      "signature": "public async Task<IActionResult> CreateRole([FromBody] CreateRoleRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "roles/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateRole(int id, [FromBody] UpdateRoleRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "roles/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteRole(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "menu-groups",
      "description": "",
      "signature": "public async Task<IActionResult> GetMenuGroups()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "menu-groups",
      "description": "",
      "signature": "public async Task<IActionResult> CreateMenuGroup([FromBody] CreateMenuGroupRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "menu-groups/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateMenuGroup(int id, [FromBody] UpdateMenuGroupRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "menu-items",
      "description": "",
      "signature": "public async Task<IActionResult> CreateMenuItem([FromBody] CreateMenuItemRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "menu-items/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateMenuItem(int id, [FromBody] UpdateMenuItemRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PATCH",
      "path": "menu-items/{id}/toggle-active",
      "description": "",
      "signature": "public async Task<IActionResult> ToggleMenuItemActive(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PATCH",
      "path": "menu-groups/{id}/toggle-active",
      "description": "",
      "signature": "public async Task<IActionResult> ToggleMenuGroupActive(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "menu-items/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteMenuItem(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "menu-groups/{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteMenuGroup(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "active",
      "description": "",
      "signature": "public async Task<ActionResult<MqttConfiguration>> GetActiveConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "effective",
      "description": "",
      "signature": "public async Task<ActionResult<Dictionary<string, object>>> GetEffectiveConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<MqttConfiguration>>> GetConfigurations()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<MqttConfiguration>> GetConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<MqttConfiguration>> CreateConfiguration(CreateMqttConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateConfiguration(int id, UpdateMqttConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "{id}/activate",
      "description": "",
      "signature": "public async Task<IActionResult> SetActiveConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "toggle",
      "description": "",
      "signature": "public async Task<IActionResult> ToggleMqtt(ToggleMqttRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "{id}/test",
      "description": "",
      "signature": "public async Task<IActionResult> TestConnection(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test",
      "description": "",
      "signature": "public async Task<IActionResult> TestConnectionWithConfig(TestMqttConnectionRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status/all",
      "description": "",
      "signature": "public async Task<ActionResult<Dictionary<int, bool>>> GetAllConnectionStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status/current",
      "description": "",
      "signature": "public async Task<ActionResult<object>> GetCurrentStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "reload",
      "description": "",
      "signature": "public async Task<IActionResult> ReloadConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public IActionResult GetStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "connect",
      "description": "",
      "signature": "public async Task<IActionResult> Connect()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "disconnect",
      "description": "",
      "signature": "public async Task<IActionResult> Disconnect()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "publish",
      "description": "",
      "signature": "public async Task<IActionResult> Publish([FromBody] PublishRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "subscribe",
      "description": "",
      "signature": "public async Task<IActionResult> Subscribe([FromBody] SubscribeRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "unsubscribe",
      "description": "",
      "signature": "public async Task<IActionResult> Unsubscribe([FromBody] UnsubscribeRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test",
      "description": "",
      "signature": "public async Task<IActionResult> TestMqtt()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public IActionResult GetConnectionStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "connect",
      "description": "",
      "signature": "public async Task<IActionResult> Connect()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "disconnect",
      "description": "",
      "signature": "public async Task<IActionResult> Disconnect()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "publish",
      "description": "",
      "signature": "public async Task<IActionResult> PublishTestMessage([FromBody] TestMessageRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "subscribe",
      "description": "",
      "signature": "public async Task<IActionResult> SubscribeToTestTopic([FromBody] TestSubscribeRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test-websocket",
      "description": "",
      "signature": "public async Task<IActionResult> TestWebSocketConnection()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<IActionResult> GetAllConfigurations()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> GetConfigurationById(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "interface/{interfaceType}",
      "description": "",
      "signature": "public async Task<IActionResult> GetConfigurationByInterface(NetworkInterfaceType interfaceType)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<IActionResult> CreateConfiguration([FromBody] NetworkConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateConfiguration(int id, [FromBody] NetworkConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "interfaces-file",
      "description": "",
      "signature": "public async Task<IActionResult> GetInterfacesFile()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "apply",
      "description": "",
      "signature": "public async Task<IActionResult> ApplyConfiguration([FromBody] ApplyNetworkConfigRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "restart",
      "description": "",
      "signature": "public async Task<IActionResult> RestartNetworking()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "backup",
      "description": "",
      "signature": "public async Task<IActionResult> BackupConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "restore",
      "description": "",
      "signature": "public async Task<IActionResult> RestoreConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public async Task<IActionResult> GetInterfaceStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test-connectivity",
      "description": "",
      "signature": "public async Task<IActionResult> TestConnectivity([FromBody] TestConnectivityRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "validate",
      "description": "",
      "signature": "public async Task<IActionResult> ValidateConfiguration([FromBody] NetworkConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "revert-to-dhcp/{interfaceType}",
      "description": "",
      "signature": "public async Task<IActionResult> RevertToDhcp(NetworkInterfaceType interfaceType)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "parse-interfaces-file",
      "description": "",
      "signature": "public async Task<IActionResult> ParseInterfacesFile()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "clear-all-static",
      "description": "",
      "signature": "public async Task<IActionResult> ClearAllStaticConfigurations()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Rack>>> GetRacks()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "by-containment/{containmentId}",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<Rack>>> GetRacksByContainment(int containmentId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<Rack>> GetRack(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<Rack>> CreateRack(CreateRackRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateRack(int id, UpdateRackRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteRack(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "by-containment/{containmentId}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteRacksByContainment(int containmentId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "roles",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<RoleDto>>> GetRoles()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "migration/status",
      "description": "",
      "signature": "public async Task<ActionResult> GetMigrationStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "migration/execute",
      "description": "",
      "signature": "public async Task<ActionResult> ExecuteMigration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "users/{userId}/permissions",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<string>>> GetUserPermissions(int userId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "users/{userId}/role",
      "description": "",
      "signature": "public async Task<ActionResult<RoleDto>> GetUserRole(int userId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "initialize",
      "description": "",
      "signature": "public async Task<ActionResult> InitializeRoles()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "test/current-user",
      "description": "",
      "signature": "public async Task<ActionResult> GetCurrentUserWithRole()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<ScanConfiguration>> GetScanConfiguration()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<ScanConfiguration>> GetScanConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<ScanConfiguration>> CreateScanConfiguration(ScanConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateScanConfiguration(int id, ScanConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "active",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateActiveScanConfiguration(ScanConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteScanConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/sync",
      "description": "",
      "signature": "public async Task<IActionResult> SyncWithMqtt()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/start",
      "description": "",
      "signature": "public async Task<IActionResult> StartScanning()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/stop",
      "description": "",
      "signature": "public async Task<IActionResult> StopScanning()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "constants",
      "description": "",
      "signature": "public IActionResult GetConstants()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<SensorConfiguration>>> GetSensorConfigurations()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<SensorConfiguration>> GetSensorConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "sensor/{sensorNumber}",
      "description": "",
      "signature": "public async Task<ActionResult<SensorConfiguration>> GetSensorConfigurationBySensorNumber(int sensorNumber)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<SensorConfiguration>> CreateSensorConfiguration(SensorConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateSensorConfiguration(int id, SensorConfigurationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteSensorConfiguration(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "calibration",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateCalibration(CalibrationRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "calibration",
      "description": "",
      "signature": "public async Task<ActionResult<Dictionary<string, decimal[]>>> GetAllCalibrations()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/sync",
      "description": "",
      "signature": "public async Task<IActionResult> SyncWithMqtt()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/upload",
      "description": "",
      "signature": "public async Task<IActionResult> UploadSensorListToMqtt()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "mqtt/mode/{mode}",
      "description": "",
      "signature": "public async Task<IActionResult> ChangeMqttMode(string mode)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "generate",
      "description": "",
      "signature": "public async Task<IActionResult> GenerateSampleData([FromQuery] int daysBack = 7, [FromQuery] int recordsPerHour = 6)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "statistics",
      "description": "",
      "signature": "public async Task<IActionResult> GetStatistics()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "info",
      "description": "",
      "signature": "public async Task<IActionResult> GetSystemInfo()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "public async Task<IActionResult> GetSystemStatus()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "refresh",
      "description": "",
      "signature": "public async Task<IActionResult> RefreshSystemInfo()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "basic",
      "description": "",
      "signature": "public IActionResult GetBasicSystemInfo()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "health",
      "description": "",
      "signature": "public IActionResult HealthCheck()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "upload/{userId}",
      "description": "",
      "signature": "public async Task<IActionResult> UploadPhoto(int userId, IFormFile photo)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "delete/{userId}",
      "description": "",
      "signature": "public async Task<IActionResult> DeletePhoto(int userId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "get/{userId}",
      "description": "",
      "signature": "public async Task<IActionResult> GetPhoto(int userId)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<IEnumerable<User>>> GetUsers()",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<ActionResult<User>> GetUser(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "",
      "description": "",
      "signature": "public async Task<ActionResult<User>> CreateUser(CreateUserRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "PUT",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> UpdateUser(int id, UpdateUserRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "DELETE",
      "path": "{id}",
      "description": "",
      "signature": "public async Task<IActionResult> DeleteUser(int id)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "send-message",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<object>>> SendMessage([FromBody] SendMessageRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "send-template",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<object>>> SendTemplateMessage([FromBody] SendTemplateMessageRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "POST",
      "path": "test",
      "description": "",
      "signature": "public async Task<ActionResult<ApiResponse<object>>> TestConnection([FromBody] WhatsAppTestMessageRequest request)",
      "requiresAuth": false,
      "roles": []
    },
    {
      "method": "GET",
      "path": "status",
      "description": "",
      "signature": "",
      "requiresAuth": false,
      "roles": []
    }
  ],
  "database": {
    "models": [
      {
        "name": "AccessLog",
        "description": "",
        "properties": [
          {
            "type": "class",
            "name": "AccessLog",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "User",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "AccessMethod",
            "name": "Via",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Trigger",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsSuccess",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "ActivityReport",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "ActivityReport",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Trigger",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ApiResponse",
        "description": "",
        "properties": [
          {
            "type": "bool",
            "name": "Success",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Message",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "CameraConfig",
        "description": "",
        "properties": [
          {
            "type": "class",
            "name": "CameraConfig",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "Port",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ApiKey",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Group",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "Containment",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "Containment",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ContainmentType",
            "name": "Type",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Location",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ICollection<Rack>",
            "name": "Racks",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ContainmentControl",
        "description": "Pending, Sent, Failed",
        "properties": [
          {
            "type": "class",
            "name": "ContainmentControl",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Command",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "ExecutedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "ContainmentControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "ControlAction",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ContainmentControlRequest",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "ContainmentControlType",
            "name": "ControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "ControlAction",
            "name": "Action",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ToggleControlRequest",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "ControlType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "ContainmentControlResponse",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Message",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "ContainmentStatus",
        "description": "Status fields from MQTT payload",
        "properties": [
          {
            "type": "class",
            "name": "ContainmentStatus",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LightingStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "SmokeDetectorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "FssStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyButtonState",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "SelenoidStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LimitSwitchFrontDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "LimitSwitchBackDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "OpenFrontDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "OpenBackDoorStatus",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "EmergencyTemp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "MqttTimestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "Device",
        "description": "Sensor specific fields",
        "properties": [
          {
            "type": "class",
            "name": "Device",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Type",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "RackId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "DeviceActivityStatus",
        "description": "Online, Offline, Unknown",
        "properties": [
          {
            "type": "class",
            "name": "DeviceActivityStatus",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "DeviceId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastSeen",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastStatusChange",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ConsecutiveFailures",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "DeviceSensorData",
        "description": "Helper method to parse raw payload as JSON",
        "properties": [
          {
            "type": "class",
            "name": "DeviceSensorData",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "DeviceId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RackId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Topic",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "ReceivedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "RawPayload",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "EmergencyReport",
        "description": "\"Smoke\", \"FSS\", \"EmergencyButton\", \"EmergencyTemp\"",
        "properties": [
          {
            "type": "class",
            "name": "EmergencyReport",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "EmergencyType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Status",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "StartTime",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "enum",
            "name": "EmergencyType",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "EmergencyReportSummary",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "TotalEvents",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "TimeSpan",
            "name": "TotalDuration",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "CurrentlyActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "EmergencyReportFilter",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Page",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PageSize",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "Maintenance",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "Maintenance",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "StartTask",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "EndTask",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "AssignTo",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "MaintenanceTarget",
            "name": "TargetType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "TargetId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Status",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "MenuManagement",
        "description": "Models/MenuManagement.cs",
        "properties": [
          {
            "type": "class",
            "name": "Role",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "DisplayName",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Level",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Color",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "Permission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Category",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuGroup",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuItem",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Url",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "MenuGroupId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuPermission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsRequired",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "UserRoleAssignment",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "UserId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RoleId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "AssignedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RolePermission",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RoleId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PermissionId",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "AssignedAt",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuGroupDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<MenuItemDto>",
            "name": "Items",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MenuItemDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Title",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Url",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Icon",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SortOrder",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "RequiresDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RoleDto",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "DisplayName",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Description",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "int",
            "name": "Level",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Color",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<string>",
            "name": "Permissions",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "class",
            "name": "UserMenuResponse",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "RoleDto",
            "name": "UserRole",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsDeveloperMode",
            "isRequired": true,
            "isKey": true
          },
          {
            "type": "List<string>",
            "name": "UserPermissions",
            "isRequired": true,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "MqttConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "MqttConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "UseEnvironmentConfig",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "UseSsl",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "KeepAliveInterval",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ReconnectDelay",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "NetworkConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "NetworkConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "NetworkInterfaceType",
            "name": "InterfaceType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "NetworkConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "NetworkInterfaceStatus",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "InterfaceName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "NetworkConfigMethod",
            "name": "ConfigMethod",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsUp",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "LastUpdated",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ApplyNetworkConfigRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "BackupCurrentConfig",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "Rack",
        "description": "Rack capacity in U units (1U, 2U, etc.)",
        "properties": [
          {
            "type": "class",
            "name": "Rack",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ContainmentId",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CapacityU",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "ICollection<Device>",
            "name": "Devices",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "ScannedDevice",
        "description": "File: Models/ScannedDevice.cs",
        "properties": [
          {
            "type": "class",
            "name": "ScannedDevice",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "SensorConfiguration",
        "description": "Navigation properties",
        "properties": [
          {
            "type": "class",
            "name": "SensorConfiguration",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "SensorNumber",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "TemperatureOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "HumidityOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfiguration",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "MaxAddressToScan",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanTimeoutMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanIntervalMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorName",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsEnabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "TemperatureOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "decimal",
            "name": "HumidityOffset",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfigurationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanTimeoutMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ScanIntervalMs",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "CalibrationRequest",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorMqttCommand",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorMqttResponse",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Command",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorListData",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "SensorDataStructure",
            "name": "DataSensor",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SensorDataStructure",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModbusAddress",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "ModbusPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SensorType",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "Enabled",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "class",
            "name": "ScanConfigData",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedPort",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "SelectedSensor",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "SystemConfig",
        "description": "Modular I2C Addresses",
        "properties": [
          {
            "type": "class",
            "name": "SystemConfig",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ModularI2cAddress1",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cAddress2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cRelay1Address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlLight",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlSelenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalDoorLock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenBackDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "TempEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempUpperThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempBottomThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "PinConfig",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "PirSensorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "FssPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SmokeSensorButtonEmergencyPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayLightPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidOpen",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidClose",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniDoorEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "CreatedBy",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "SystemConfigRequest",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cAddress2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ModularI2cRelay1Address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "Debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlLight",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalControlSelenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalDoorLock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "IntervalOpenBackDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "TempEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempUpperThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "TempBottomThreshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "PinConfigRequest",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "FssPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "SmokeSensorButtonEmergencyPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "ButtonBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "LimitSwitchFrontDoor",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayLightPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMagneticPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidOpen",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniSelenoidClose",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniFrontDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniBackDoorPin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "RelayMiniDoorEmergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MqttConfigPayload",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "MqttConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "string",
            "name": "Result",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "CurrentSystemConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "modular_i2c_address_2",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "modular_i2c_relay_1_address",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "debug",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_control_light",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_control_selenoid",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_door_lock",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_open_front_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "interval_open_back_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "bool",
            "name": "temp_emergency",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "temp_upper_threshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "double",
            "name": "temp_bottom_threshold",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "CurrentPinConfigResponse",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "RelayPins",
            "name": "relay",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "RelayMiniPins",
            "name": "relay_mini",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "OptocouplerPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "fss_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "smoke_sensor_pin_button_emergency_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "button_front_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "button_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "limit_switch_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "limit_switch_front_door",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RelayPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_magnetic_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_magnetic_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "class",
            "name": "RelayMiniPins",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_selenoid_close",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_front_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_back_door_pin",
            "isRequired": false,
            "isKey": true
          },
          {
            "type": "int",
            "name": "relay_mini_door_emergency",
            "isRequired": false,
            "isKey": true
          }
        ],
        "relationships": []
      },
      {
        "name": "SystemInfo",
        "description": "Additional system information",
        "properties": [
          {
            "type": "class",
            "name": "SystemInfo",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "CpuTemp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "MemoryUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "DiskUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Eth0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Wlan0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "Uptime",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Hostname",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsPlatform",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsVersion",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ProcessorCount",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsAvailable",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "class",
            "name": "SystemInfoDto",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "CpuTemp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "MemoryUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalMemory",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "double",
            "name": "DiskUsage",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "UsedDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "TotalDisk",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Eth0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Wlan0IpAddress",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "long",
            "name": "Uptime",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Hostname",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsPlatform",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "OsVersion",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "int",
            "name": "ProcessorCount",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "Timestamp",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsAvailable",
            "isRequired": false,
            "isKey": false
          }
        ],
        "relationships": []
      },
      {
        "name": "User",
        "description": "Legacy enum role - kept for backward compatibility during migration",
        "properties": [
          {
            "type": "class",
            "name": "User",
            "isRequired": false,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Name",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "Email",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "string",
            "name": "PasswordHash",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "UserRole",
            "name": "Role",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "CreatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "DateTime",
            "name": "UpdatedAt",
            "isRequired": true,
            "isKey": false
          },
          {
            "type": "bool",
            "name": "IsActive",
            "isRequired": true,
            "isKey": false
          }
        ],
        "relationships": []
      }
    ],
    "relationships": []
  },
  "security": {
    "authentication": [
      {
        "method": "POST",
        "path": "login",
        "description": "",
        "signature": "public async Task<ActionResult<LoginResponse>> Login(LoginRequest request)",
        "requiresAuth": false,
        "roles": []
      },
      {
        "method": "POST",
        "path": "register",
        "description": "",
        "signature": "public async Task<ActionResult<LoginResponse>> Register(RegisterRequest request)",
        "requiresAuth": false,
        "roles": []
      }
    ],
    "authorization": [],
    "roles": [
      {
        "name": "User",
        "level": 1,
        "description": "Standard user with basic access"
      },
      {
        "name": "Developer",
        "level": 2,
        "description": "Developer with advanced features access"
      },
      {
        "name": "Admin",
        "level": 3,
        "description": "Administrator with full system access"
      }
    ]
  }
}