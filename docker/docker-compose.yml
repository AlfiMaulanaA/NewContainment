version: '3.8'

services:
  # Nginx Reverse Proxy (Port 80/443)
  nginx:
    image: nginx:alpine
    container_name: newcontainment-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
      - ../nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - newcontainment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (Next.js)
  frontend:
    build:
      context: ..
      dockerfile: docker/images/frontend/Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_APP_NAME: ${APP_NAME:-IoT Containment System}
        NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-1.0.0}
        NEXT_PUBLIC_API_BASE_URL: http://backend:5000
    container_name: newcontainment-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - backend
    networks:
      - newcontainment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backend Service (ASP.NET Core)
  backend:
    build:
      context: ..
      dockerfile: docker/images/backend/Dockerfile
    container_name: newcontainment-backend
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__DefaultConnection=Data Source=/app/data/app.db
      - MQTT__Broker=mosquitto
      - MQTT__Port=1883
      - JWT__Key=${JWT_SECRET:-CHANGE-ME-IN-PRODUCTION-USE-256-BIT-RANDOM-KEY-FOR-SECURITY}
      - CORS__AllowedOrigins=http://localhost:3000,http://nginx
    volumes:
      - newcontainment-data:/app/data
      - newcontainment-logs:/app/logs
    depends_on:
      - mosquitto
    networks:
      - newcontainment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G
        reservations:
          cpus: '0.50'
          memory: 512M

  # MQTT Broker (Mosquitto)
  mosquitto:
    image: eclipse-mosquitto:2.0-openssl
    container_name: newcontainment-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "8883:8883"
      - "9001:9001"
    volumes:
      - ./configs/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    environment:
      - MOSQUITTO_USERNAME=${MQTT_USERNAME:-containment}
      - MOSQUITTO_PASSWORD=${MQTT_PASSWORD:-secure_password_2024}
    networks:
      - newcontainment-network
    healthcheck:
      test: ["CMD", "mosquitto_ctrl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Middleware Service (Python + ZKTeco)
  middleware:
    build:
      context: ..
      dockerfile: docker/images/middleware/Dockerfile
    container_name: newcontainment-middleware
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME:-containment}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-secure_password_2024}
      - ZK_DEVICES_CONFIG=/app/config/device_config.json
    volumes:
      - ./Middleware:/app/middleware:ro
      - middleware-config:/app/config
      - middleware-logs:/app/logs
      - /dev/bus/usb:/dev/bus/usb:ro  # For USB ZKTeco devices
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # Serial devices (adjust as needed)
    depends_on:
      - mosquitto
    networks:
      - newcontainment-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import paho.mqtt.client; print('OK')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Optional: Dummy Sensor for Testing
  dummy-sensor:
    image: python:3.11-slim
    container_name: newcontainment-dummy-sensor
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME:-containment}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-secure_password_2024}
      - DEVICE_COUNT=${DEVICE_COUNT:-5}
      - UPDATE_INTERVAL=${UPDATE_INTERVAL:-5}
    volumes:
      - ./dummy_sensor.py:/app/dummy_sensor.py:ro
    working_dir: /app
    command: ["python3", "dummy_sensor.py"]
    depends_on:
      - mosquitto
    networks:
      - newcontainment-network
    profiles:
      - testing  # Only run in testing mode

# Networks
networks:
  newcontainment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for data persistence
volumes:
  newcontainment-data:
    driver: local
  newcontainment-logs:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  middleware-config:
    driver: local
  middleware-logs:
    driver: local
