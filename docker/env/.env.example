# NewContainment Docker Production Environment Variables
# Copy this file to .env and modify values for your production deployment

# ===============================================
# APPLICATION SETTINGS
# ===============================================

# Application metadata
APP_NAME=IoT Containment System
APP_VERSION=1.0.0

# ===============================================
# SECURITY SETTINGS
# ===============================================

# JWT Secret Key - CHANGE THIS IN PRODUCTION!
# Generate with: openssl rand -base64 64 | tr -d "=+/" | cut -c1-64
JWT_SECRET=CHANGE-ME-IN-PRODUCTION-USE-256-BIT-RANDOM-KEY-FOR-SECURITY

# ===============================================
# MQTT BROKER SETTINGS
# ===============================================

# MQTT Authentication
MQTT_USERNAME=containment
MQTT_PASSWORD=secure_password_2024

# ===============================================
# DATABASE SETTINGS
# ===============================================

# SQLite Database path (handled by Docker volumes)
# Database will persist in Docker volume: newcontainment-data

# ===============================================
# CONTAINER RESOURCE LIMITS
# ===============================================

# Device Configuration (for testing)
DEVICE_COUNT=5
UPDATE_INTERVAL=5

# ===============================================
# DEVELOPMENT/TESTING SETTINGS
# ===============================================

# Profile for running dummy sensors (default: testing)
# docker-compose --profile testing up -d

# ===============================================
# DEPLOYMENT SETTINGS
# ===============================================

# Docker Compose Project Name
COMPOSE_PROJECT_NAME=newcontainment

# ===============================================
# OPTIONAL: EXTERNAL DATABASE (Future use)
# ===============================================

# PostgreSQL connection (uncomment when switching from SQLite)
# POSTGRES_HOST=postgres_db
# POSTGRES_PORT=5432
# POSTGRES_DB=newcontainment
# POSTGRES_USER=newcontainment
# POSTGRES_PASSWORD=secure_db_password

# ===============================================
# OPTIONAL: REDIS CACHE (Future use)
# ===============================================

# Redis configuration for caching
# REDIS_HOST=redis
# REDIS_PORT=6379
# REDIS_PASSWORD=

# ===============================================
# OPTIONAL: SSL/HTTPS SETTINGS (Future use)
# ===============================================

# SSL Certificate paths (mount as volumes in nginx service)
# SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
# SSL_KEY_PATH=/etc/nginx/ssl/key.pem

# ===============================================
# MONITORING AND LOGGING
# ===============================================

# Log levels (Debug, Information, Warning, Error, Critical)
LOG_LEVEL=Information

# Enable detailed MQTT logging
MQTT_DEBUG_LOGGING=true

# ===============================================
# BACKUP AND MAINTENANCE
# ===============================================

# Backup settings
BACKUP_ENABLED=true
BACKUP_INTERVAL_HOURS=24
BACKUP_RETENTION_DAYS=30

# ===============================================
# NETWORKING
# ===============================================

# Custom port mappings (if needed)
# FRONTEND_PORT=3000
# BACKEND_PORT=5000
# MQTT_PORT=1883
# MQTT_WS_PORT=9001
# NGINX_PORT=80

# ===============================================
# PERFORMANCE TUNING
# ===============================================

# Connection limits
MAX_CONNECTIONS=1000
MQTT_MAX_CONNECTIONS=10000

# Buffer sizes
MQTT_BUFFER_SIZE=65536
HTTP_BUFFER_SIZE=4096

# ===============================================
# INTEGRATION SETTINGS
# ===============================================

# External API endpoints (if integrating with other systems)
# EXTERNAL_API_URL=https://api.external-service.com
# EXTERNAL_API_KEY=your_api_key_here

# ===============================================
# MAINTENANCE MODE
# ===============================================

# Enable maintenance mode (shows maintenance page)
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE="System is currently under maintenance. Please try again later."

# ===============================================
# DEVELOPMENT FEATURES
# ===============================================

# Enable development features (should be false in production)
DEV_MODE=false
ENABLE_SWAGGER=true
ENABLE_CORS=true

# ===============================================
# CRITICAL: CHANGE THESE VALUES!
# ===============================================

# IMPORTANT: Generate new secure values for production!

# 1. JWT_SECRET: Generate with command:
#    openssl rand -base64 64 | tr -d "=+/" | cut -c1-64

# 2. MQTT_USERNAME/MQTT_PASSWORD: Change to secure values

# 3. POSTGRES_PASSWORD: If using PostgreSQL

# 4. REDIS_PASSWORD: If using Redis

# ===============================================
# QUICK START COMMANDS
# ===============================================

# Build and start all services:
# docker-compose --env-file .env up -d

# Start only production services (without testing):
# docker-compose --env-file .env up -d nginx frontend backend mosquitto middleware

# Start with dummy sensors for testing:
# docker-compose --env-file .env --profile testing up -d

# View logs:
# docker-compose logs -f

# Scale services:
# docker-compose up -d --scale frontend=3

# Update deployment:
# docker-compose pull && docker-compose up -d

# Cleanup:
# docker-compose down -v
