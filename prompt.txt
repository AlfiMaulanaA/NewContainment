=================================
2025-10-25 00:41:30 warn: Backend.Services.MqttDeviceSubscriptionService[0]
      MQTT client disconnected: UnspecifiedError
2025-10-25 00:41:30 warn: Backend.Services.MqttService[0]
      MQTT client disconnected: UnspecifiedError
2025-10-25 00:41:30 warn: Backend.Services.MqttService[0]
      MQTT client disconnected: UnspecifiedError
2025-10-25 00:41:30 fail: Backend.Services.MqttDeviceSubscriptionService[0]
      Failed to connect to MQTT broker
2025-10-25 00:41:30 fail: Backend.Services.MqttDeviceSubscriptionService[0]
      Failed to connect and subscribe to device topics
      MQTTnet.Adapter.MqttConnectingFailedException: Error while authenticating. Connection closed.
       ---> MQTTnet.Exceptions.MqttCommunicationException: Connection closed.
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         --- End of inner exception stack trace ---
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at Backend.Services.MqttDeviceSubscriptionService.ConnectToMqttBroker(Dictionary`2 config, CancellationToken cancellationToken) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttDeviceSubscriptionService.cs:line 117
         at Backend.Services.MqttDeviceSubscriptionService.ConnectAndSubscribeToDeviceTopics(CancellationToken cancellationToken) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttDeviceSubscriptionService.cs:line 82
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      ❌ CRITICAL: Failed to connect to MQTT broker
      MQTTnet.Adapter.MqttConnectingFailedException: Error while authenticating. Connection closed.
       ---> MQTTnet.Exceptions.MqttCommunicationException: Connection closed.
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         --- End of inner exception stack trace ---
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at Backend.Services.MqttService.ConnectAsync() in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttService.cs:line 150
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      ❌ CRITICAL: Failed to connect to MQTT broker
      MQTTnet.Adapter.MqttConnectingFailedException: Error while authenticating. Connection closed.
       ---> MQTTnet.Exceptions.MqttCommunicationException: Connection closed.
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         --- End of inner exception stack trace ---
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at Backend.Services.MqttService.ConnectAsync() in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttService.cs:line 150
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      Error Details: Error while authenticating. Connection closed.
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      Error Details: Error while authenticating. Connection closed.
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      Inner Exception: Connection closed.
2025-10-25 00:41:30 fail: Backend.Services.MqttService[0]
      Inner Exception: Connection closed.
2025-10-25 00:41:30 warn: Backend.Services.ContainmentDataRetrievalHostedService[0]
      Failed to connect to MQTT broker on attempt 1
      MQTTnet.Adapter.MqttConnectingFailedException: Error while authenticating. Connection closed.
       ---> MQTTnet.Exceptions.MqttCommunicationException: Connection closed.
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         --- End of inner exception stack trace ---
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at Backend.Services.MqttService.ConnectAsync() in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttService.cs:line 150
         at Backend.Services.ContainmentDataRetrievalHostedService.WaitForMqttConnectionAsync(CancellationToken stoppingToken) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/ContainmentDataRetrievalHostedService.cs:line 72
2025-10-25 00:41:30 warn: Backend.Services.ContainmentMqttHostedService[0]
      Failed to connect to MQTT broker on attempt 1
      MQTTnet.Adapter.MqttConnectingFailedException: Error while authenticating. Connection closed.
       ---> MQTTnet.Exceptions.MqttCommunicationException: Connection closed.
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         --- End of inner exception stack trace ---
         at MQTTnet.MqttClient.Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at MQTTnet.MqttClient.ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken)
         at Backend.Services.MqttService.ConnectAsync() in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/MqttService.cs:line 150
         at Backend.Services.ContainmentMqttHostedService.WaitForMqttConnectionAsync(CancellationToken stoppingToken) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/ContainmentMqttHostedService.cs:line 124

 MQTT connection established for ContainmentDataRetrievalHostedService
2025-10-25 00:41:50 fail: Backend.Services.ContainmentMqttHostedService[0]
      Error checking dynamic interval for device 1, falling back to legacy method
      System.InvalidOperationException: The LINQ expression 'DbSet<DeviceSensorData>()
          .Where(d => d.DeviceId == __deviceId_0)
          .Any(d => Math.Abs((d.Timestamp - __roundedTimestamp_1).TotalSeconds) <= __timeTolerance_TotalSeconds_2)' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
         at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
         at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutorExpression[TResult](Expression query)
         at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
         at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass11_0`1.<ExecuteCore>b__0()
         at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteCore[TResult](Expression query, Boolean async, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, Expression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, LambdaExpression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync[TSource](IQueryable`1 source, Expression`1 predicate, CancellationToken cancellationToken)
         at Backend.Services.SensorDataIntervalService.ShouldSaveByIntervalAsync(Int32 deviceId, DateTime timestamp, Nullable`1 containmentId) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/SensorDataIntervalService.cs:line 211
         at Backend.Services.ContainmentMqttHostedService.ShouldSaveWithDynamicInterval(Int32 deviceId, DateTime timestamp) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/ContainmentMqttHostedService.cs:line 297
2025-10-25 00:41:50 info: Backend.Services.ContainmentMqttHostedService[0]
      Successfully stored sensor data for device 1 from topic Containment/Sensor/Temperature_1
2025-10-25 00:41:50 fail: Backend.Services.ContainmentMqttHostedService[0]
      Error checking dynamic interval for device 5, falling back to legacy method
      System.InvalidOperationException: The LINQ expression 'DbSet<DeviceSensorData>()
          .Where(d => d.DeviceId == __deviceId_0)
          .Any(d => Math.Abs((d.Timestamp - __roundedTimestamp_1).TotalSeconds) <= __timeTolerance_TotalSeconds_2)' could not be translated. Either rewrite the query in a form that can be translated, or switch to client evaluation explicitly by inserting a call to 'AsEnumerable', 'AsAsyncEnumerable', 'ToList', or 'ToListAsync'. See https://go.microsoft.com/fwlink/?linkid=2101038 for more information.
         at Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor.Translate(Expression expression)
         at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutorExpression[TResult](Expression query)
         at Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryExecutor[TResult](Expression query)
         at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](IDatabase database, Expression query, IModel model, Boolean async)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass11_0`1.<ExecuteCore>b__0()
         at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult](Object cacheKey, Func`1 compiler)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteCore[TResult](Expression query, Boolean async, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync[TResult](Expression query, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync[TResult](Expression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, Expression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ExecuteAsync[TSource,TResult](MethodInfo operatorMethodInfo, IQueryable`1 source, LambdaExpression expression, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.AnyAsync[TSource](IQueryable`1 source, Expression`1 predicate, CancellationToken cancellationToken)
         at Backend.Services.SensorDataIntervalService.ShouldSaveByIntervalAsync(Int32 deviceId, DateTime timestamp, Nullable`1 containmentId) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/SensorDataIntervalService.cs:line 211
         at Backend.Services.ContainmentMqttHostedService.ShouldSaveWithDynamicInterval(Int32 deviceId, DateTime timestamp) in /home/ubuntu/Alfi/RnD/Development/NewContainment/Backend/Services/ContainmentMqttHostedService.cs:line 297
2025-10-25 00:41:50 info: Backend.Services.ContainmentMqttHostedService[0]
